<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【剑指Offer】旋转数组的最小数字</title>
    <link href="/2020/07/10/jianzhi-offer/11.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <url>/2020/07/10/jianzhi-offer/11.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  </p><p>示例 1：</p><p>输入：[3,4,5,1,2]<br>输出：1<br>示例 2：</p><p>输入：[2,2,2,0,1]<br>输出：0</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] numbers)</span> </span>&#123;        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> j=numbers.length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(i&lt;j) &#123;            <span class="hljs-keyword">int</span> mid=(i+j)&gt;&gt;<span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(numbers[mid]&gt;numbers[j])                i=mid+<span class="hljs-number">1</span>;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(numbers[mid]&lt;numbers[j])                j=mid;            <span class="hljs-keyword">else</span> j--;        &#125;        <span class="hljs-keyword">return</span> numbers[i];    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>旋转数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【剑指Offer】青蛙跳台问题</title>
    <link href="/2020/07/10/jianzhi-offer/10-%20II.%20%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/"/>
    <url>/2020/07/10/jianzhi-offer/10-%20II.%20%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p>示例 1：</p><p>输入：n = 2<br>输出：2<br>示例 2：</p><p>输入：n = 7<br>输出：21<br>提示：</p><p>0 &lt;= n &lt;= 100</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>其实这个题目就是斐波那契数列，但是用到了记忆化</p><p>这么一说  不就有点dp的味道了吗，对，没错。其实算法间没那么清晰的界限。</p></blockquote><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numWays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">int</span> curr = <span class="hljs-number">1</span>, next = <span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(n-- &gt; <span class="hljs-number">0</span>) &#123;            next = next%<span class="hljs-number">1000000007</span> + curr;            curr = next - curr;        &#125;        <span class="hljs-keyword">return</span> curr;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>斐波那契</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【剑指Offer】斐波那契数列一</title>
    <link href="/2020/07/10/jianzhi-offer/10-%20I.%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <url>/2020/07/10/jianzhi-offer/10-%20I.%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p><p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p>示例 1：</p><p>输入：n = 2<br>输出：1<br>示例 2：</p><p>输入：n = 5<br>输出：5</p><p>提示：</p><p>0 &lt;= n &lt;= 100</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;        <span class="hljs-keyword">int</span> curr = <span class="hljs-number">0</span>, next = <span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(N-- &gt; <span class="hljs-number">0</span>) &#123;            next = next%<span class="hljs-number">1000000007</span> + curr;            curr = next - curr;        &#125;        <span class="hljs-keyword">return</span> curr;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>斐波那契</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【剑指Offer】用两个栈实现队列</title>
    <link href="/2020/07/10/jianzhi-offer/09.%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2020/07/10/jianzhi-offer/09.%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><p>示例 1：</p><p>输入：<br>[“CQueue”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[3],[],[]]<br>输出：[null,null,3,-1]<br>示例 2：</p><p>输入：<br>[“CQueue”,”deleteHead”,”appendTail”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[],[5],[2],[],[]]<br>输出：[null,-1,null,null,5,2]<br>提示：</p><p>1 &lt;= values &lt;= 10000<br>最多会对 appendTail、deleteHead 进行 10000 次调用</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> </span>&#123;    Deque&lt;Integer&gt; stack1;    Deque&lt;Integer&gt; stack2;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CQueue</span><span class="hljs-params">()</span> </span>&#123;        stack1 = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();        stack2 = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();    &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;        stack1.push(value);    &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">//如果第二个栈为空，就把第一个全部倒进第二个</span>        <span class="hljs-keyword">if</span>(stack2.isEmpty())&#123;            <span class="hljs-keyword">while</span>(!stack1.isEmpty())&#123;                stack2.push(stack1.pop());            &#125;        &#125;        <span class="hljs-comment">//判断第二个栈是否为空，空就返回-1</span>        <span class="hljs-keyword">if</span>(stack2.isEmpty())&#123;            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span> stack2.pop();        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>栈</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【剑指Offer】重建二叉树</title>
    <link href="/2020/07/10/jianzhi-offer/07.%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/07/10/jianzhi-offer/07.%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p>例如，给出</p><p>前序遍历 preorder = [3,9,20,15,7]<br>中序遍历 inorder = [9,3,15,20,7]<br>返回如下的二叉树：</p><pre><code class="hljs angelscript">  <span class="hljs-number">3</span> / \<span class="hljs-number">9</span>  <span class="hljs-number">20</span>  /  \ <span class="hljs-number">15</span>   <span class="hljs-number">7</span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>递归解法</p></blockquote><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    Map &lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;inorder.length;i++)map.put(inorder[i],i);        <span class="hljs-keyword">return</span> dfs(preorder,<span class="hljs-number">0</span>,preorder.length-<span class="hljs-number">1</span>,inorder,<span class="hljs-number">0</span>,inorder.length-<span class="hljs-number">1</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span> pl,<span class="hljs-keyword">int</span> pr,<span class="hljs-keyword">int</span>[] inorder,<span class="hljs-keyword">int</span> il,<span class="hljs-keyword">int</span> ir)</span></span>&#123;        <span class="hljs-keyword">if</span>(pl&gt;pr)<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(preorder[pl]);        <span class="hljs-keyword">int</span> k=map.get(root.val);        TreeNode left = dfs(preorder,pl+<span class="hljs-number">1</span>,pl+k-il,inorder,il,k-<span class="hljs-number">1</span>);        TreeNode right = dfs(preorder,pl+k-il+<span class="hljs-number">1</span>,pr,inorder,k+<span class="hljs-number">1</span>,ir);        root.left=left;        root.right=right;        <span class="hljs-keyword">return</span> root;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【剑指Offer】找出数组中重复的数字</title>
    <link href="/2020/07/10/jianzhi-offer/03.%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2020/07/10/jianzhi-offer/03.%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><p>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p><p>限制：</p><p>2 &lt;= n &lt;= 100000</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">int</span> n=nums.length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;  <span class="hljs-comment">//看题目要求，这一段可以不写</span>            <span class="hljs-keyword">if</span>(nums[i]&lt;<span class="hljs-number">0</span> || nums[i]&gt;n)<span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;            <span class="hljs-keyword">while</span>(nums[i]!=i)&#123;                <span class="hljs-keyword">if</span>(nums[i]==nums[nums[i]])<span class="hljs-keyword">return</span> nums[i];                swap(nums,i,nums[i]);            &#125;        &#125;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> [] nums,<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;        <span class="hljs-keyword">int</span> tmp=nums[a];        nums[a]=nums[b];        nums[b]=tmp;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【剑指Offer】从尾到头打印链表</title>
    <link href="/2020/07/10/jianzhi-offer/06.%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/07/10/jianzhi-offer/06.%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入：head = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>]输出：[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;        List &lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">while</span>(head!=<span class="hljs-keyword">null</span>)&#123;            list.add(head.val);            head=head.next;        &#125;        <span class="hljs-keyword">int</span> [] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [list.size()];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;res.length;i++)&#123;            res[i]=list.get(res.length-<span class="hljs-number">1</span>-i);        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【剑指Offer】替换空格</title>
    <link href="/2020/07/10/jianzhi-offer/05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <url>/2020/07/10/jianzhi-offer/05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例 1：</p><p>输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p><p>限制：</p><p>0 &lt;= s 的长度 &lt;= 10000</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replaceSpace</span><span class="hljs-params">(String s)</span> </span>&#123;        <span class="hljs-keyword">int</span> length = s.length();        <span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[length * <span class="hljs-number">3</span>];        <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;            <span class="hljs-keyword">char</span> c = s.charAt(i);            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">' '</span>) &#123;                array[size++] = <span class="hljs-string">'%'</span>;                array[size++] = <span class="hljs-string">'2'</span>;                array[size++] = <span class="hljs-string">'0'</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                array[size++] = c;            &#125;        &#125;        String newStr = <span class="hljs-keyword">new</span> String(array, <span class="hljs-number">0</span>, size);  <span class="hljs-comment">//记住这种转换方法</span>        <span class="hljs-keyword">return</span> newStr;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【剑指Offer】二维数组中的查找</title>
    <link href="/2020/07/10/jianzhi-offer/04.%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <url>/2020/07/10/jianzhi-offer/04.%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数target。</p><p>示例:</p><p>现有矩阵 matrix 如下：</p><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>给定 target = 5，返回 true。</p><p>给定 target = 20，返回 false。</p><p>限制：</p><p>0 &lt;= n &lt;= 1000</p><p>0 &lt;= m &lt;= 1000</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>常规办法就是遍历寻找，或者二分，但是这个题很取巧</p><p>比如我们将要求的数和右上角进行比较</p><p>如果右上角小于target，那么这一行所有的数小于target  也就是i++</p><p>如果右上角大于target，那么这一列所有的数都大于target   也就是j–</p></blockquote><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;        <span class="hljs-keyword">if</span>(matrix.length==<span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].length==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=matrix[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(i&lt;matrix.length &amp;&amp; j&gt;-<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">if</span>(matrix[i][j]==target)<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            <span class="hljs-keyword">if</span>(matrix[i][j]&lt;target)i++;            <span class="hljs-keyword">else</span> j--;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
      <tag>算法</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】Gateway微服务网关</title>
    <link href="/2020/07/08/goujian/12.Gateway%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <url>/2020/07/08/goujian/12.Gateway%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】Gateway微服务网关"><a href="#【项目创建流程】Gateway微服务网关" class="headerlink" title="【项目创建流程】Gateway微服务网关"></a>【项目创建流程】Gateway微服务网关</h1><h2 id="网关基本概念"><a href="#网关基本概念" class="headerlink" title="网关基本概念"></a>网关基本概念</h2><h3 id="1、API网关介绍"><a href="#1、API网关介绍" class="headerlink" title="1、API网关介绍"></a>1、API网关介绍</h3><p>API 网关出现的原因是微服务架构的出现，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><p>（1）客户端会多次请求不同的微服务，增加了客户端的复杂性。</p><p>（2）存在跨域请求，在一定场景下处理相对复杂。</p><p>（3）认证复杂，每个服务都需要独立认证。</p><p>（4）难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很难实施。</p><p>以上这些问题可以借助 API 网关解决。API 网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过 API 网关这一层。也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 API 网关来做，这样既提高业务灵活性又不缺安全性</p><h3 id="2、Spring-Cloud-Gateway"><a href="#2、Spring-Cloud-Gateway" class="headerlink" title="2、Spring Cloud Gateway"></a>2、Spring Cloud Gateway</h3><p><strong>Spring cloud gateway</strong>是spring官方基于Spring 5.0和Spring Boot2.0等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供简单、有效和统一的API路由管理方式，Spring Cloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Netflix Zuul，其不仅提供统一的路由方式，并且还基于Filer链的方式提供了网关基本的功能，例如：安全、监控/埋点、限流等。</p><h3 id="3、Spring-Cloud-Gateway-核心概念"><a href="#3、Spring-Cloud-Gateway-核心概念" class="headerlink" title="3、Spring Cloud Gateway 核心概念"></a>3、Spring Cloud Gateway 核心概念</h3><p>下面介绍一下Spring Cloud Gateway中几个重要的概念。</p><p>（1）路由。路由是网关最基础的部分，路由信息有一个ID、一个目的URL、一组断言和一组Filter组成。如果断言路由为真，则说明请求的URL和配置匹配</p><p>（2）断言。Java8中的断言函数。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自于http request中的任何信息，比如请求头和参数等。</p><p>（3）过滤器。一个标准的Spring webFilter。Spring cloud gateway中的filter分为两种类型的Filter，分别是Gateway Filter和Global Filter。过滤器Filter将会对请求和响应进行修改处理。</p><h3 id="4、执行流程"><a href="#4、执行流程" class="headerlink" title="4、执行流程"></a>4、执行流程</h3><p>如下图所示，Spring cloud Gateway发出请求。然后再由Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway web handler。Handler再通过指定的过滤器链将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><p><img src="http://img1.jimu98.cn//blog/a3cb663f-16f5-4133-b091-1b92035b57ce.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>4、特点</strong></p><p>优点：</p><ul><li>性能强劲：是第一代网关Zuul的1.6倍</li><li>功能强大：内置了很多实用的功能，例如转发、监控、限流等</li><li>设计优雅，容易扩展</li></ul><p>缺点：</p><ul><li>其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高</li><li>不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行</li><li>需要Spring Boot 2.0及以上的版本，才支持</li></ul><h2 id="搭建Gateway服务"><a href="#搭建Gateway服务" class="headerlink" title="搭建Gateway服务"></a>搭建Gateway服务</h2><h3 id="创建父模块infrastructure"><a href="#创建父模块infrastructure" class="headerlink" title="创建父模块infrastructure"></a>创建父模块infrastructure</h3><h3 id="创建子模块api-gateway"><a href="#创建子模块api-gateway" class="headerlink" title="创建子模块api_gateway"></a>创建子模块api_gateway</h3><h3 id="配置pom"><a href="#配置pom" class="headerlink" title="配置pom"></a>配置pom</h3><p>在api_gateway的pom中添加如下依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 网关 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><h3 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h3><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">9110</span> <span class="hljs-comment"># 服务端口</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 环境设置</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">infrastructure-apigateway</span> <span class="hljs-comment"># 服务名</span></code></pre><h3 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h3><p>修改日志输出目录名为 apigateway</p><h3 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.guli.infrastructure.apigateway;<span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfrastructureApiGatewayApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(InfrastructureApiGatewayApplication<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">args</span>)</span>;    &#125;&#125;</code></pre><h2 id="启动网关"><a href="#启动网关" class="headerlink" title="启动网关"></a>启动网关</h2><h3 id="配置路由和跨域"><a href="#配置路由和跨域" class="headerlink" title="配置路由和跨域"></a>配置路由和跨域</h3><h4 id="1、路由和断言"><a href="#1、路由和断言" class="headerlink" title="1、路由和断言"></a>1、路由和断言</h4><p>application.yml文件中添加路由配置</p><ul><li>-：表示数组元素，可以配置多个节点</li><li>id：配置的唯一标识，可以和微服务同名，也可以起别的名字，区别于其他 Route。</li><li>uri：路由指向的目的地 uri，即客户端请求最终被转发到的微服务。</li><li>predicates：断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。</li><li>Path：路径形式的断言。当匹配这个路径时，断言条件成立</li><li>/**：一个或多个层次的路径</li></ul><pre><code class="hljs dts"><span class="hljs-meta">#spring:</span><span class="hljs-symbol">  cloud:</span><span class="hljs-symbol">    gateway:</span><span class="hljs-symbol">      routes:</span>      - id: service-edu<span class="hljs-symbol">        uri:</span> http:<span class="hljs-comment">//localhost:8110</span><span class="hljs-symbol">        predicates:</span>        - Path=<span class="hljs-meta-keyword">/user/</span>**</code></pre><h5 id="内置路由断言工厂"><a href="#内置路由断言工厂" class="headerlink" title="内置路由断言工厂"></a>内置路由断言工厂</h5><p>Predicate(断言) 用于进行条件判断，只有断言都返回真，才会真正的执行路由。</p><p>SpringCloud Gateway包括许多内置的断言工厂，所有这些断言都与HTTP请求的不同属性匹配。具体如下：</p><h6 id="1、基于Datetime"><a href="#1、基于Datetime" class="headerlink" title="1、基于Datetime"></a>1、基于Datetime</h6><p>此类型的断言根据时间做判断，主要有三个：</p><ul><li>AfterRoutePredicateFactory： 接收一个日期参数，判断请求日期是否晚于指定日期</li><li>BeforeRoutePredicateFactory： 接收一个日期参数，判断请求日期是否早于指定日期</li><li>BetweenRoutePredicateFactory： 接收两个日期参数，判断请求日期是否在指定时间段内</li></ul><pre><code class="hljs angelscript">- After=<span class="hljs-number">2019</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>T23:<span class="hljs-number">59</span>:<span class="hljs-number">59.789</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>[Asia/Shanghai]</code></pre><h6 id="2、基于远程地址"><a href="#2、基于远程地址" class="headerlink" title="2、基于远程地址"></a>2、基于远程地址</h6><p> RemoteAddrRoutePredicateFactory：接收一个IP地址段，判断请求主机地址是否在地址段中</p><pre><code class="hljs angelscript">- RemoteAddr=<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>/<span class="hljs-number">24</span></code></pre><h6 id="3、基于Cookie"><a href="#3、基于Cookie" class="headerlink" title="3、基于Cookie"></a>3、基于Cookie</h6><p>CookieRoutePredicateFactory：接收两个参数，cookie 名字和一个正则表达式。 判断请求cookie是否具有给定名称且值与正则表达式匹配。</p><pre><code class="hljs routeros">- <span class="hljs-attribute">Cookie</span>=chocolate, ch.</code></pre><h6 id="4、基于Header"><a href="#4、基于Header" class="headerlink" title="4、基于Header"></a>4、基于Header</h6><p>HeaderRoutePredicateFactory：接收两个参数，标题名称和正则表达式。 判断请求Header是否具有给定名称且值与正则表达式匹配。</p><pre><code class="hljs routeros">- <span class="hljs-attribute">Header</span>=X-Request-Id, \d+</code></pre><h6 id="5、基于Host"><a href="#5、基于Host" class="headerlink" title="5、基于Host"></a>5、基于Host</h6><p>HostRoutePredicateFactory：接收一个参数，主机名模式。判断请求的Host是否满足匹配规则。</p><pre><code class="hljs routeros">- <span class="hljs-attribute">Host</span>=**.testhost.org</code></pre><h6 id="6、基于Method请求方法"><a href="#6、基于Method请求方法" class="headerlink" title="6、基于Method请求方法"></a>6、基于Method请求方法</h6><p>MethodRoutePredicateFactory：接收一个参数，判断请求类型是否跟指定的类型匹配。</p><pre><code class="hljs oxygene">- <span class="hljs-function"><span class="hljs-keyword">Method</span>=<span class="hljs-title">GET</span></span></code></pre><h6 id="7、基于Path请求路径"><a href="#7、基于Path请求路径" class="headerlink" title="7、基于Path请求路径"></a>7、基于Path请求路径</h6><p>PathRoutePredicateFactory：接收一个参数，判断请求的URI部分是否满足路径规则。</p><pre><code class="hljs haml">-<span class="ruby"> Path=<span class="hljs-regexp">/foo/</span>**</span></code></pre><h6 id="8、基于Query请求参数"><a href="#8、基于Query请求参数" class="headerlink" title="8、基于Query请求参数"></a>8、基于Query请求参数</h6><p>QueryRoutePredicateFactory ：接收两个参数，请求param和正则表达式， 判断请求参数是否具有给定名称且值与正则表达式匹配。</p><pre><code class="hljs routeros">- <span class="hljs-attribute">Query</span>=baz, ba.</code></pre><h6 id="9、基于路由权重"><a href="#9、基于路由权重" class="headerlink" title="9、基于路由权重"></a>9、基于路由权重</h6><p>WeightRoutePredicateFactory：接收一个[组名,权重]，然后对于同一个组内的路由按照权重转发</p><pre><code class="hljs yaml"><span class="hljs-attr">routes:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">weight_route1</span>   <span class="hljs-attr">uri:</span> <span class="hljs-string">host1</span>   <span class="hljs-attr">predicates:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/product/**</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">Weight=group3,</span> <span class="hljs-number">1</span><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">weight_route2</span>   <span class="hljs-attr">uri:</span> <span class="hljs-string">host2</span>   <span class="hljs-attr">predicates:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/product/**</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">Weight=</span> <span class="hljs-string">group3,</span> <span class="hljs-number">9</span></code></pre><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><h6 id="一、过滤器的基本概念"><a href="#一、过滤器的基本概念" class="headerlink" title="一、过滤器的基本概念"></a>一、过滤器的基本概念</h6><p>1、作用</p><p>过滤器就是在请求的传递过程中，对请求和响应做一些修改</p><p>2、生命周期</p><p>客户端的请求先经过“pre”类型的filter，然后将请求转发到具体的业务服务，收到业务服务的响应之后，再经过“post”类型的filter处理，最后返回响应到客户端。</p><p>pre： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现参数校验、权限校验、流量监控、日志输出、协议转换等；</p><p>post：这种过滤器在路由到达微服务以后执行。这种过滤器可用做响应内容、响应头的修改，日志的输出，流量监控等。</p><p>![img](C:/Users/kaibo/Documents/My Knowledge/temp/3c0e137d-3839-462d-bf81-a0f11559b7f5/128/index_files/0dddd23a-c681-468b-b16f-31a7bc89ea9d.jpg)</p><p>3、分类</p><p>局部过滤器 GatewayFilter：作用在某一个路由上</p><p>全局过滤器 GlobalFilter：作用全部路由上</p><h6 id="二、局部过滤器"><a href="#二、局部过滤器" class="headerlink" title="二、局部过滤器"></a>二、局部过滤器</h6><p>1、内置局部过滤器</p><p>在SpringCloud Gateway中内置了很多不同类型的网关路由过滤器。具体如下</p><pre><code class="hljs yaml"><span class="hljs-attr">routes:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">service-edu</span>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://service-edu</span>  <span class="hljs-attr">predicates:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**,</span> <span class="hljs-string">/*/edu/**</span>  <span class="hljs-attr">filters:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">SetStatus=250</span> <span class="hljs-comment"># 修改返回状态码</span></code></pre><p>测试：</p><p>![img](C:/Users/kaibo/Documents/My Knowledge/temp/3c0e137d-3839-462d-bf81-a0f11559b7f5/128/index_files/2d87bf44-5bac-42b0-bd4a-7a3260c40d19.png)</p><h6 id="三、全局过滤器"><a href="#三、全局过滤器" class="headerlink" title="三、全局过滤器"></a>三、全局过滤器</h6><p>1、内置全局过滤器</p><p>*<em>![img](C:/Users/kaibo/Documents/My Knowledge/temp/3c0e137d-3839-462d-bf81-a0f11559b7f5/128/index_files/0.984782576945038.png)<br>*</em></p><p>内置全局过滤器的使用举例：负载均衡过滤器</p><pre><code class="hljs dts"><span class="hljs-symbol">lb:</span><span class="hljs-comment">//service-edu</span></code></pre><p>2、自定义全局过滤器</p><p>定义一个Filter实现 GlobalFilter 和 Ordered接口</p><p>2、测试网关路由转发</p><p>访问：<a href="http://localhost:9110/user/info" target="_blank" rel="noopener">http://localhost:9110/user/info</a></p><p>请求转发到：<a href="http://localhost:9110/user/info" target="_blank" rel="noopener">http://localhost:8110/user/info</a></p><h3 id="通过nacos注册中心"><a href="#通过nacos注册中心" class="headerlink" title="通过nacos注册中心"></a>通过nacos注册中心</h3><h4 id="1、网关中添加依赖"><a href="#1、网关中添加依赖" class="headerlink" title="1、网关中添加依赖"></a>1、网关中添加依赖</h4><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--服务注册--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h4 id="2、主类添加注解"><a href="#2、主类添加注解" class="headerlink" title="2、主类添加注解"></a>2、主类添加注解</h4><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableDiscoveryClient</span>  <span class="hljs-comment">//SpringBoot2.0之后可以省略</span></code></pre><h4 id="3、添加nacos配置"><a href="#3、添加nacos配置" class="headerlink" title="3、添加nacos配置"></a>3、添加nacos配置</h4><pre><code class="hljs yaml"><span class="hljs-comment">#spring:</span><span class="hljs-comment">#  cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos服务地址</span></code></pre><h4 id="4、添加gateway配置"><a href="#4、添加gateway配置" class="headerlink" title="4、添加gateway配置"></a>4、添加gateway配置</h4><pre><code class="hljs yaml"><span class="hljs-comment">#spring:</span><span class="hljs-comment">#  cloud:</span><span class="hljs-comment">#    gateway:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">locator:</span>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># gateway可以发现nacos中的微服务</span></code></pre><h4 id="5、修改uri配置"><a href="#5、修改uri配置" class="headerlink" title="5、修改uri配置"></a>5、修改uri配置</h4><p>将uri的地址修改成注册中心中的微服务地址，网关姜葱nacos中按照名称获取微服务</p><p>lb：表示在集群环境下通过负载均衡的方式调用</p><pre><code class="hljs groovy"><span class="hljs-string">uri:</span> <span class="hljs-string">lb:</span><span class="hljs-comment">//service-edu  #内置负载均衡过滤器</span></code></pre><h4 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h4><p>访问：<a href="http://localhost:9110/user/info" target="_blank" rel="noopener">http://localhost:9110/user/info</a></p><h4 id="7、匹配多个path"><a href="#7、匹配多个path" class="headerlink" title="7、匹配多个path"></a>7、匹配多个path</h4><pre><code class="hljs haml">-<span class="ruby"> Path=<span class="hljs-regexp">/user/</span>**, <span class="hljs-regexp">/*/edu</span><span class="hljs-regexp">/**</span></span></code></pre><h3 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h3><h4 id="1、前端配置"><a href="#1、前端配置" class="headerlink" title="1、前端配置"></a>1、前端配置</h4><p>修改guli-admin中 config/dev.env.js，BASE_API指定到网关地址</p><pre><code class="hljs 1c">BASE_API: '"http://127.0.0.1:<span class="hljs-number">9110</span>"',</code></pre><h4 id="2、删除后端跨域配置"><a href="#2、删除后端跨域配置" class="headerlink" title="2、删除后端跨域配置"></a>2、删除后端跨域配置</h4><p>此时可以删除微服务中的跨域注解 <em>@CrossOrigin</em></p><p><em>例如 service_edu中 LoginController的跨域注解</em></p><h4 id="3、跨域配置"><a href="#3、跨域配置" class="headerlink" title="3、跨域配置"></a>3、跨域配置</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.guli.infrastructure.apigateway.config;<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CorsConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title">corsFilter</span><span class="hljs-params">()</span> </span>&#123;        CorsConfiguration config = <span class="hljs-keyword">new</span> CorsConfiguration();        config.addAllowedMethod(<span class="hljs-string">"*"</span>);        config.addAllowedOrigin(<span class="hljs-string">"*"</span>);        config.addAllowedHeader(<span class="hljs-string">"*"</span>);        UrlBasedCorsConfigurationSource source = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource(<span class="hljs-keyword">new</span> PathPatternParser());        source.registerCorsConfiguration(<span class="hljs-string">"/**"</span>, config);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CorsWebFilter(source);    &#125;&#125;</code></pre><p>注意：去掉后端的所有跨域配置</p><h3 id="完整的路由配置"><a href="#完整的路由配置" class="headerlink" title="完整的路由配置"></a>完整的路由配置</h3><h4 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h4><pre><code class="hljs haml">routes:-<span class="ruby"> <span class="hljs-symbol">id:</span> service-edu</span><span class="ruby">  <span class="hljs-symbol">uri:</span> <span class="hljs-symbol">lb:</span>/<span class="hljs-regexp">/service-edu</span></span><span class="ruby">  <span class="hljs-symbol">predicates:</span></span><span class="ruby">  - Path=<span class="hljs-regexp">/user/</span>**, <span class="hljs-regexp">/*/edu</span><span class="hljs-regexp">/**</span></span><span class="ruby">- <span class="hljs-symbol">id:</span> service-cms</span><span class="ruby">  <span class="hljs-symbol">uri:</span> <span class="hljs-symbol">lb:</span>/<span class="hljs-regexp">/service-cms</span></span><span class="ruby">  <span class="hljs-symbol">predicates:</span></span><span class="ruby">  - Path=<span class="hljs-regexp">/*/cms</span><span class="hljs-regexp">/**</span></span><span class="ruby">- <span class="hljs-symbol">id:</span> service-oss</span><span class="ruby">  <span class="hljs-symbol">uri:</span> <span class="hljs-symbol">lb:</span>/<span class="hljs-regexp">/service-oss</span></span><span class="ruby">  <span class="hljs-symbol">predicates:</span></span><span class="ruby">  - Path=<span class="hljs-regexp">/*/oss</span><span class="hljs-regexp">/**</span></span><span class="ruby">- <span class="hljs-symbol">id:</span> service-sms</span><span class="ruby">  <span class="hljs-symbol">uri:</span> <span class="hljs-symbol">lb:</span>/<span class="hljs-regexp">/service-sms</span></span><span class="ruby">  <span class="hljs-symbol">predicates:</span></span><span class="ruby">  - Path=<span class="hljs-regexp">/*/sms</span><span class="hljs-regexp">/**</span></span><span class="ruby">- <span class="hljs-symbol">id:</span> service-trade</span><span class="ruby">  <span class="hljs-symbol">uri:</span> <span class="hljs-symbol">lb:</span>/<span class="hljs-regexp">/service-trade</span></span><span class="ruby">  <span class="hljs-symbol">predicates:</span></span><span class="ruby">  - Path=<span class="hljs-regexp">/*/trade</span><span class="hljs-regexp">/**</span></span><span class="ruby">- <span class="hljs-symbol">id:</span> service-ucenter</span><span class="ruby">  <span class="hljs-symbol">uri:</span> <span class="hljs-symbol">lb:</span>/<span class="hljs-regexp">/service-ucenter</span></span><span class="ruby">  <span class="hljs-symbol">predicates:</span></span><span class="ruby">  - Path=<span class="hljs-regexp">/*/ucenter</span><span class="hljs-regexp">/**</span></span><span class="ruby">- <span class="hljs-symbol">id:</span> service-vod</span><span class="ruby">  <span class="hljs-symbol">uri:</span> <span class="hljs-symbol">lb:</span>/<span class="hljs-regexp">/service-vod</span></span><span class="ruby">  <span class="hljs-symbol">predicates:</span></span><span class="ruby">  - Path=<span class="hljs-regexp">/*/vod</span><span class="hljs-regexp">/**</span></span></code></pre><h4 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h4><p>（1）修改guli-site中 utils/request.js，BASE_API指定到网关地址</p><pre><code class="hljs 1c">baseURL: 'http://127.0.0.1:<span class="hljs-number">9110</span>',</code></pre><p>（2）所有的api模块中的baseURL可以删除</p><p>（3）guli-admin上传相关表单中action地址的修改</p><p>data中定义：</p><pre><code class="hljs css"><span class="hljs-selector-tag">BASE_API</span>: <span class="hljs-selector-tag">process</span><span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.BASE_API</span></code></pre><p>html中使用：</p><pre><code class="hljs clojure"><span class="hljs-symbol">:action=</span><span class="hljs-string">"BASE_API+'/admin/oss/file/upload?module=avatar'"</span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
      <tag>Gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】集成Redis缓存</title>
    <link href="/2020/07/08/goujian/11.%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA%E5%92%8CRedis/"/>
    <url>/2020/07/08/goujian/11.%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA%E5%92%8CRedis/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】集成Redis缓存"><a href="#【项目创建流程】集成Redis缓存" class="headerlink" title="【项目创建流程】集成Redis缓存"></a>【项目创建流程】集成Redis缓存</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1、场景"><a href="#1、场景" class="headerlink" title="1、场景"></a>1、场景</h3><p>由于首页数据变化不是很频繁，而且首页访问量相对较大，所以我们有必要把首页数据缓存到redis中，减少数据库压力和提高访问速度。</p><h3 id="2、RedisTemplate"><a href="#2、RedisTemplate" class="headerlink" title="2、RedisTemplate"></a>2、RedisTemplate</h3><p>Jedis是Redis官方推荐的面向Java的操作Redis的客户端，而RedisTemplate是Spring Data Redis中对Jedis api的高度封装。</p><p>Spring Data Redis是spring大家族的一部分，提供了在srping应用中通过简单的配置访问redis服务，对reids底层开发包(Jedis,  JRedis, and RJC)进行了高度封装，RedisTemplate提供了redis各种操作、异常处理及序列化功能，支持发布订阅，并对spring cache进行了实现。</p><h2 id="二、引入redis"><a href="#二、引入redis" class="headerlink" title="二、引入redis"></a>二、引入redis</h2><h3 id="1、项目中集成redis"><a href="#1、项目中集成redis" class="headerlink" title="1、项目中集成redis"></a>1、项目中集成redis</h3><p>common父模块中添加redis依赖，Spring Boot 2.0以上默认通过commons-pool2连接池连接redis</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring boot redis缓存引入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- lecttuce 缓存连接池--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2、添加redis连接配置"><a href="#2、添加redis连接配置" class="headerlink" title="2、添加redis连接配置"></a>2、添加redis连接配置</h3><p>service_cms 和 service_edu 的 application.yml 中添加如下配置</p><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>   <span class="hljs-attr">redis:</span>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.100</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span> <span class="hljs-comment">#默认为空</span>    <span class="hljs-attr">lettuce:</span>      <span class="hljs-attr">pool:</span>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span>  <span class="hljs-comment">#最大连接数，负值表示没有限制，默认8</span>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span>    <span class="hljs-comment">#最大阻塞等待时间，负值表示没限制，默认-1</span>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span>     <span class="hljs-comment">#最大空闲连接，默认8</span>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span>     <span class="hljs-comment">#最小空闲连接，默认0</span></code></pre><h3 id="3、配置Redis"><a href="#3、配置Redis" class="headerlink" title="3、配置Redis"></a>3、配置Redis</h3><p>service-base添加RedisConfig</p><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.atguigu.guli.service.base.config;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 我们自定义一个 RedisTemplate，设置序列化器，这样我们可以很方便的操作实例对象。</span><span class="hljs-comment"> * 否则redis自动使用对象的jdk序列化</span><span class="hljs-comment"> */</span>@Configuration<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> </span>&#123;    @Bean    <span class="hljs-keyword">public</span> RedisTemplate&lt;<span class="hljs-keyword">String</span>, Serializable&gt; redisTemplate(LettuceConnectionFactory connectionFactory) &#123;        RedisTemplate&lt;<span class="hljs-keyword">String</span>, Serializable&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-type">RedisTemplate</span>&lt;&gt;();        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-type">StringRedisSerializer</span>());<span class="hljs-comment">//key序列化方式</span>        redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-type">GenericJackson2JsonRedisSerializer</span>());<span class="hljs-comment">//value序列化</span>        redisTemplate.setConnectionFactory(connectionFactory);                <span class="hljs-keyword">return</span> redisTemplate;    &#125;&#125;</code></pre><h2 id="三、测试redisTemplate"><a href="#三、测试redisTemplate" class="headerlink" title="三、测试redisTemplate"></a>三、测试redisTemplate</h2><h3 id="1、测试redis数据存储"><a href="#1、测试redis数据存储" class="headerlink" title="1、测试redis数据存储"></a>1、测试redis数据存储</h3><p>ApiAdController中添加下面的方法进行测试</p><pre><code class="hljs kotlin"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<span class="hljs-meta">@PostMapping(<span class="hljs-meta-string">"save-test"</span>)</span><span class="hljs-keyword">public</span> R saveAd(<span class="hljs-meta">@RequestBody</span> Ad ad)&#123;    <span class="hljs-comment">//redisTemplate.opsForValue().set("ad1", ad);</span>    redisTemplate.opsForValue().<span class="hljs-keyword">set</span>(<span class="hljs-string">"index::ad"</span>, ad);    <span class="hljs-keyword">return</span> R.ok();&#125;<span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">"get-test/&#123;key&#125;"</span>)</span><span class="hljs-keyword">public</span> R getAd(<span class="hljs-meta">@PathVariable</span> String key)&#123;    Ad ad = (Ad)redisTemplate.opsForValue().<span class="hljs-keyword">get</span>(key);    <span class="hljs-keyword">return</span> R.ok().<span class="hljs-keyword">data</span>(<span class="hljs-string">"ad"</span>, ad);&#125;<span class="hljs-meta">@DeleteMapping(<span class="hljs-meta-string">"remove-test/&#123;key&#125;"</span>)</span><span class="hljs-keyword">public</span> R removeAd(<span class="hljs-meta">@PathVariable</span> String key)&#123;    <span class="hljs-built_in">Boolean</span> delete = redisTemplate.delete(key);    System.<span class="hljs-keyword">out</span>.println(delete);<span class="hljs-comment">//是否删除成功</span>    <span class="hljs-built_in">Boolean</span> hasKey = redisTemplate.hasKey(key);    System.<span class="hljs-keyword">out</span>.println(hasKey);<span class="hljs-comment">//key是否存在</span>    <span class="hljs-keyword">return</span> R.ok();&#125;</code></pre><h3 id="2、常用方法"><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h3><p>redisTemplate提供了以下几种存储数据的方法</p><pre><code class="hljs gcode">redisTemplate.opsForValue<span class="hljs-comment">()</span>; <span class="hljs-comment">//操作字符串</span>redisTemplate.opsForHash<span class="hljs-comment">()</span>; <span class="hljs-comment">//操作hash</span>redisTemplate.opsForList<span class="hljs-comment">()</span>; <span class="hljs-comment">//操作list</span>redisTemplate.opsForSet<span class="hljs-comment">()</span>; <span class="hljs-comment">//操作set</span>redisTemplate.opsForZSet<span class="hljs-comment">()</span>; <span class="hljs-comment">//操作有序set</span></code></pre><h2 id="四、使用缓存注解"><a href="#四、使用缓存注解" class="headerlink" title="四、使用缓存注解"></a>四、使用缓存注解</h2><h3 id="1、修改Redis配置类"><a href="#1、修改Redis配置类" class="headerlink" title="1、修改Redis配置类"></a>1、修改Redis配置类</h3><p>配置类上添加注解</p><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableCaching</span></code></pre><p>添加bean配置</p><pre><code class="hljs reasonml">@Beanpublic CacheManager cache<span class="hljs-constructor">Manager(LettuceConnectionFactory <span class="hljs-params">connectionFactory</span>)</span> &#123;        RedisCacheConfiguration config = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisCacheConfiguration</span>.</span></span>default<span class="hljs-constructor">CacheConfig()</span>        <span class="hljs-comment">//过期时间600秒</span>        .entry<span class="hljs-constructor">Ttl(Duration.<span class="hljs-params">ofSeconds</span>(600)</span>)         <span class="hljs-comment">// 配置序列化</span>        .serialize<span class="hljs-constructor">KeysWith(RedisSerializationContext.SerializationPair.<span class="hljs-params">fromSerializer</span>(<span class="hljs-params">new</span> StringRedisSerializer()</span>))        .serialize<span class="hljs-constructor">ValuesWith(RedisSerializationContext.SerializationPair.<span class="hljs-params">fromSerializer</span>(<span class="hljs-params">new</span> GenericJackson2JsonRedisSerializer()</span>))        .disable<span class="hljs-constructor">CachingNullValues()</span>;    RedisCacheManager cacheManager = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisCacheManager</span>.</span></span>builder(connectionFactory)        .cache<span class="hljs-constructor">Defaults(<span class="hljs-params">config</span>)</span>        .build<span class="hljs-literal">()</span>;    return cacheManager;&#125;</code></pre><h3 id="2、添加缓存注解"><a href="#2、添加缓存注解" class="headerlink" title="2、添加缓存注解"></a>2、添加缓存注解</h3><p>@Cacheable(value = “xxx”, key = “‘xxx’”)：标注在方法上，对方法返回结果进行缓存。下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。</p><p>service_cms：AdServiceImpl</p><pre><code class="hljs less"><span class="hljs-variable">@Cacheable</span>(value = <span class="hljs-string">"index"</span>, key = <span class="hljs-string">"'selectByAdTypeId'"</span>)<span class="hljs-variable">@Override</span>public List&lt;Ad&gt; selectByAdTypeId(String adTypeId) &#123;</code></pre><p>service_edu：CourseServiceImpl</p><pre><code class="hljs less"><span class="hljs-variable">@Cacheable</span>(value = <span class="hljs-string">"index"</span>, key = <span class="hljs-string">"'selectHotCourse'"</span>)<span class="hljs-variable">@Override</span>public List&lt;Course&gt; selectHotCourse() &#123;</code></pre><p>service_edu：TeacherServiceImpl</p><pre><code class="hljs less"><span class="hljs-variable">@Cacheable</span>(value = <span class="hljs-string">"index"</span>, key = <span class="hljs-string">"'selectHotTeacher'"</span>)<span class="hljs-variable">@Override</span>public List&lt;Teacher&gt; selectHotTeacher() &#123;</code></pre>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
      <tag>Redis</tag>
      
      <tag>bean</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】Sentinel介绍和环境搭建</title>
    <link href="/2020/07/08/goujian/10.Sentinel%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/07/08/goujian/10.Sentinel%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】Sentinel介绍和环境搭建"><a href="#【项目创建流程】Sentinel介绍和环境搭建" class="headerlink" title="【项目创建流程】Sentinel介绍和环境搭建"></a>【项目创建流程】Sentinel介绍和环境搭建</h1><h2 id="一、Sentinel介绍"><a href="#一、Sentinel介绍" class="headerlink" title="一、Sentinel介绍"></a>一、Sentinel介绍</h2><h3 id="1、什么是Sentinel"><a href="#1、什么是Sentinel" class="headerlink" title="1、什么是Sentinel"></a>1、什么是Sentinel</h3><p>Sentinel (分布式系统的流量防卫兵) 是阿里开源的一套用于服务容错的综合性解决方案。它以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来保护服务的稳定性。</p><h3 id="2、Sentinel-的特征"><a href="#2、Sentinel-的特征" class="headerlink" title="2、Sentinel 的特征"></a>2、Sentinel 的特征</h3><ul><li>丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li>完备的实时监控：Sentinel 提供了实时的监控功能。通过控制台可以看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li>广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 SpringCloud、Dubbo、gRPC 的整合。只需要引入相应的依赖并进行简单的配置即可快速地接入Sentinel。</li><li>完善的扩展点：Sentinel 提供简单易用、完善的扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><h3 id="3、Sentinel-的组成"><a href="#3、Sentinel-的组成" class="headerlink" title="3、Sentinel 的组成"></a>3、Sentinel 的组成</h3><p>核心库（Java 客户端）：不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo /Spring Cloud 等框架也有较好的支持。</p><p>控制台（Dashboard）：基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="二、Sentinel控制台"><a href="#二、Sentinel控制台" class="headerlink" title="二、Sentinel控制台"></a>二、Sentinel控制台</h2><p>Sentinel 提供一个轻量级的控制台, 它提供机器发现、单机资源实时监控以及规则管理等功能。</p><h3 id="1、下载和安装"><a href="#1、下载和安装" class="headerlink" title="1、下载和安装"></a>1、下载和安装</h3><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a></p><p>下载版本：sentinel-dashboard-1.7.0.jar</p><h3 id="2、启动控制台"><a href="#2、启动控制台" class="headerlink" title="2、启动控制台"></a>2、启动控制台</h3><p>控制台本身是一个SpringBoot项目，直接使用jar命令启动项目</p><pre><code class="hljs css"><span class="hljs-selector-tag">java</span> <span class="hljs-selector-tag">-jar</span> <span class="hljs-selector-tag">sentinel-dashboard-1</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.jar</span></code></pre><pre><code class="hljs reasonml">java -<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dserver</span>.</span></span>port=<span class="hljs-number">8888</span> -<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dcsp</span>.</span></span>sentinel.dashboard.server=localhost:<span class="hljs-number">8080</span> -<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dproject</span>.</span></span>name=sentinel-dashboard -jar sentinel-dashboard-<span class="hljs-number">1.7</span>.<span class="hljs-number">0.</span>jar</code></pre><p>访问：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>用户名密码：sentinel/sentinel</p><h2 id="三、微服务集成Sentinel客户端"><a href="#三、微服务集成Sentinel客户端" class="headerlink" title="三、微服务集成Sentinel客户端"></a>三、微服务集成Sentinel客户端</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><p>service模块中配置Sentinel的pom依赖（实际是在服务消费者端需要依赖）</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--服务容错--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2、添加测试方法"><a href="#2、添加测试方法" class="headerlink" title="2、添加测试方法"></a>2、添加测试方法</h3><p>TeacherController中添加如下方法用于测试</p><pre><code class="hljs kotlin"><span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">"/message1"</span>)</span><span class="hljs-keyword">public</span> String message1() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"message1"</span>;&#125;<span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">"/message2"</span>)</span><span class="hljs-keyword">public</span> String message2() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"message2"</span>;&#125;</code></pre><h2 id="四、微服务连接控制台"><a href="#四、微服务连接控制台" class="headerlink" title="四、微服务连接控制台"></a>四、微服务连接控制台</h2><h3 id="1、微服务配置"><a href="#1、微服务配置" class="headerlink" title="1、微服务配置"></a>1、微服务配置</h3><p>service_edu微服务yml中添加以下配置</p><pre><code class="hljs yaml"><span class="hljs-comment">#spring:</span><span class="hljs-comment">#  cloud:</span>    <span class="hljs-attr">sentinel:</span>      <span class="hljs-attr">transport:</span>        <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span> <span class="hljs-comment">#跟控制台交流的端口，随意指定一个未使用的端口即可</span>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span> <span class="hljs-comment"># 指定控制台服务的地址</span></code></pre><h3 id="2、swagger中测试"><a href="#2、swagger中测试" class="headerlink" title="2、swagger中测试"></a>2、swagger中测试</h3><p>测试message1和message2的访问</p><h3 id="3、查看sentinel控制台"><a href="#3、查看sentinel控制台" class="headerlink" title="3、查看sentinel控制台"></a>3、查看sentinel控制台</h3><p><img src="http://img1.jimu98.cn//blog/3884aad4-c899-4205-9ac5-21d0ae8a3437.png" srcset="/img/loading.gif" alt="img"></p><h3 id="4、控制台运行原理"><a href="#4、控制台运行原理" class="headerlink" title="4、控制台运行原理"></a>4、控制台运行原理</h3><p>Sentinel的控制台是一个SpringBoot编写的程序。我们需要将我们的微服务程序注册到控制台上，即在微服务中指定控制台的地址（localhost:8080）</p><p>并且还要开启一个跟控制台传递数据的端口（8081），控制台也可以通过此端口调用微服务中的监控程序获取微服务的各种信息。</p><h2 id="OpenFeign整合Sentinel"><a href="#OpenFeign整合Sentinel" class="headerlink" title="OpenFeign整合Sentinel"></a>OpenFeign整合Sentinel</h2><h3 id="1、引入sentinel的依赖"><a href="#1、引入sentinel的依赖" class="headerlink" title="1、引入sentinel的依赖"></a>1、引入sentinel的依赖</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--服务容错--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2、开启Sentinel支持"><a href="#2、开启Sentinel支持" class="headerlink" title="2、开启Sentinel支持"></a>2、开启Sentinel支持</h3><p>在service_edu的yml配置文件中开启Feign对Sentinel的支持</p><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span>  <span class="hljs-attr">sentinel:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span></code></pre><h3 id="3、创建容错类"><a href="#3、创建容错类" class="headerlink" title="3、创建容错类"></a>3、创建容错类</h3><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.atguigu.guli.service.edu.feign.fallback;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OssFileServiceFallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OssFileService</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function">R <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">return</span> R.<span class="hljs-title">error</span><span class="hljs-params">()</span></span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function">R <span class="hljs-title">removeFile</span><span class="hljs-params">(String url)</span> </span>&#123;        log.info(<span class="hljs-string">"熔断保护"</span>);        <span class="hljs-function"><span class="hljs-keyword">return</span> R.<span class="hljs-title">error</span><span class="hljs-params">()</span></span>;    &#125;&#125;</code></pre><h3 id="4、指定容错类"><a href="#4、指定容错类" class="headerlink" title="4、指定容错类"></a>4、指定容错类</h3><p>为OpenFeign远程调用接口添加fallback属性值没指定容错类</p><pre><code class="hljs less"><span class="hljs-variable">@Service</span><span class="hljs-variable">@FeignClient</span>(value = <span class="hljs-string">"service-oss"</span>, fallback = OssFileServiceFallBack.class)public interface OssFileService &#123;</code></pre><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>停止service_oss微服务，测试删除讲师的功能</p>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Sentinel</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】Nacos注册中心与服务调用</title>
    <link href="/2020/07/08/goujian/9.Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <url>/2020/07/08/goujian/9.Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】Nacos注册中心与服务调用"><a href="#【项目创建流程】Nacos注册中心与服务调用" class="headerlink" title="【项目创建流程】Nacos注册中心与服务调用"></a>【项目创建流程】Nacos注册中心与服务调用</h1><h2 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h2><h3 id="1、常见注册中心"><a href="#1、常见注册中心" class="headerlink" title="1、常见注册中心"></a>1、常见注册中心</h3><ul><li><p>Eureka：Eureka是Spring Cloud Netflix中的重要组件，主要作用就是做服务注册和发现。2.0遇到性能瓶颈，停止维护，现在已经闭源。</p></li><li><p>Consul：Consul是基于GO语言开发的开源工具，主要面向分布式，服务化的系统提供服务注册、服务发现和配置管理的功能。</p></li><li><p>Zookeeper：zookeeper是一个分布式服务框架，是Apache Hadoop 的一个子项目。</p></li><li><p>Nacos（Spring Cloud Alibaba）</p></li><li><ul><li>Alibaba针对Spring Cloud体系的注册中心</li><li>相对于 Spring Cloud Eureka 来说，Nacos 更强大</li><li>Nacos = Spring Cloud Eureka + Spring Cloud Config + Spring Cloud Bus</li></ul></li></ul><h3 id="2、为什么叫Nacos"><a href="#2、为什么叫Nacos" class="headerlink" title="2、为什么叫Nacos"></a>2、为什么叫Nacos</h3><ul><li><p>前四个字母分别为 Naming 和 Configuration 的前两个字母，最后的s为Service</p></li><li><ul><li>Dynamic Naming and Configuration Service</li></ul></li><li><p>Nacos就是：注册中心 + 配置中心的组合</p></li><li><ul><li>Spring Cloud Alibaba Nacos = SpringCloudEureka + SpringCloudConfig +SpringCloudBus</li></ul></li></ul><h3 id="3、Nacos下载和安装"><a href="#3、Nacos下载和安装" class="headerlink" title="3、Nacos下载和安装"></a>3、Nacos下载和安装</h3><p>下载地址：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><p>下载版本：nacos-server-1.1.4.zip 或 nacos-server-1.1.4.tar.gz，解压任意目录即可</p><h3 id="4、启动Nacos"><a href="#4、启动Nacos" class="headerlink" title="4、启动Nacos"></a>4、启动Nacos</h3><p>- Windows</p><p>启动：双击bin/startup.cmd运行文件</p><p>访问：<a href="http://localhost:8848/nacos" target="_blank" rel="noopener">http://localhost:8848/nacos</a></p><p>用户名密码：nacos/nacos</p><p>- Linux/Unix/Mac</p><p>启动命令(standalone代表着单机模式运行，非集群模式)</p><p>启动命令：sh startup.sh -m standalone</p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><p>service模块中配置Nacos客户端的pom依赖</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--服务注册--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="2、添加服务配置信息"><a href="#2、添加服务配置信息" class="headerlink" title="2、添加服务配置信息"></a>2、添加服务配置信息</h3><p>配置application.properties，在客户端微服务中添加注册Nacos服务的配置信息</p><pre><code class="hljs yaml"><span class="hljs-comment">#spring:</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos服务地址</span></code></pre><h3 id="3、添加Nacos客户端注解"><a href="#3、添加Nacos客户端注解" class="headerlink" title="3、添加Nacos客户端注解"></a>3、添加Nacos客户端注解</h3><p>在客户端微服务启动类中添加注解</p><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableDiscoveryClient</span></code></pre><h3 id="4、启动客户端微服务"><a href="#4、启动客户端微服务" class="headerlink" title="4、启动客户端微服务"></a>4、启动客户端微服务</h3><p>启动注册中心，启动已注册的微服务，可以在Nacos服务列表中看到被注册的微服务</p><p><img src="http://img1.jimu98.cn//blog/4a9b848e-ebd3-4bb2-bc18-b4330095c72d.png" srcset="/img/loading.gif" alt="img"></p><h2 id="基于OpenFeign的服务调用"><a href="#基于OpenFeign的服务调用" class="headerlink" title="基于OpenFeign的服务调用"></a>基于OpenFeign的服务调用</h2><h3 id="一、OpenFeign是什么"><a href="#一、OpenFeign是什么" class="headerlink" title="一、OpenFeign是什么"></a>一、OpenFeign是什么</h3><p>OpenFeign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务一样简单， 只需要创建一个接口并添加一个注解即可。</p><p>Nacos很好的兼容了OpenFeign， OpenFeign默认集成了 Ribbon， 所以在Nacos下使用OpenFeign默认就实现了负载均衡的效果。</p><h3 id="二、OpenFeign的引入"><a href="#二、OpenFeign的引入" class="headerlink" title="二、OpenFeign的引入"></a>二、OpenFeign的引入</h3><h4 id="1、引入依赖-1"><a href="#1、引入依赖-1" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><p>service模块中配置OpenFeign的pom依赖（实际是在服务消费者端需要OpenFeign的依赖）</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--服务调用--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h4 id="2、启动类添加注解"><a href="#2、启动类添加注解" class="headerlink" title="2、启动类添加注解"></a>2、启动类添加注解</h4><p>在service_edu的启动类添加如下注解</p><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableFeignClients</span></code></pre><h3 id="三、OpenFeign的使用"><a href="#三、OpenFeign的使用" class="headerlink" title="三、OpenFeign的使用"></a>三、OpenFeign的使用</h3><h4 id="1、oss微服务中创建测试api"><a href="#1、oss微服务中创建测试api" class="headerlink" title="1、oss微服务中创建测试api"></a>1、oss微服务中创建测试api</h4><p>服务的生产者的FileController中添加如下方法：</p><pre><code class="hljs less"><span class="hljs-variable">@ApiOperation</span>(value = <span class="hljs-string">"测试"</span>)<span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">"test"</span>)public R test() &#123;    <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.info</span>(<span class="hljs-string">"oss test被调用"</span>);    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">R</span><span class="hljs-selector-class">.ok</span>();&#125;</code></pre><h4 id="2、edu微服务中创建远程调用接口"><a href="#2、edu微服务中创建远程调用接口" class="headerlink" title="2、edu微服务中创建远程调用接口"></a>2、edu微服务中创建远程调用接口</h4><p>服务消费者中创建feign包，创建如下接口：</p><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.atguigu.guli.service.edu.feign;<span class="hljs-meta">@Service</span><span class="hljs-meta">@FeignClient(<span class="hljs-meta-string">"service-oss"</span>)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OssFileService</span> </span>&#123;    <span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">"/admin/oss/file/test"</span>)</span>    R test();&#125;</code></pre><h4 id="3、调用远程方法"><a href="#3、调用远程方法" class="headerlink" title="3、调用远程方法"></a>3、调用远程方法</h4><p>服务消费者中的TeacherController中添加如下方法：</p><pre><code class="hljs less"><span class="hljs-variable">@Autowired</span>private OssFileService ossFileService;<span class="hljs-variable">@ApiOperation</span>(<span class="hljs-string">"测试服务调用"</span>)<span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">"test"</span>)public R test()&#123;    <span class="hljs-selector-tag">ossFileService</span><span class="hljs-selector-class">.test</span>();    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">R</span><span class="hljs-selector-class">.ok</span>();&#125;</code></pre><h3 id="四、负载均衡"><a href="#四、负载均衡" class="headerlink" title="四、负载均衡"></a>四、负载均衡</h3><h4 id="Ribbon的负载均衡策略"><a href="#Ribbon的负载均衡策略" class="headerlink" title="Ribbon的负载均衡策略"></a>Ribbon的负载均衡策略</h4><table><thead><tr><th>策略名</th><th>策略描述</th></tr></thead><tbody><tr><td>BestAvailableRule</td><td>选择一个最小的并发请求的server</td></tr><tr><td>AvailabilityFilteringRule</td><td>过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（activeconnections 超过配置的阈值）</td></tr><tr><td>WeightedResponseTimeRule</td><td>根据响应时间分配一个weight，响应时间越长，weight越小，被选中的可能性越低。</td></tr><tr><td>RetryRule</td><td>对选定的负载均衡策略机上重试机制。</td></tr><tr><td>RoundRobinRule</td><td>轮询选择server</td></tr><tr><td>RandomRule</td><td>随机选择一个server</td></tr><tr><td>ZoneAvoidanceRule</td><td>综合判断server所在区域的性能和server的可用性选择server</td></tr></tbody></table><p>配置负载均衡策略的方式：</p><pre><code class="hljs yaml"><span class="hljs-attr">service-product:</span> <span class="hljs-comment"># 调用的提供者的名称 </span>  <span class="hljs-attr">ribbon:</span>     <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span></code></pre><h3 id="五、OpenFeign的超时控制"><a href="#五、OpenFeign的超时控制" class="headerlink" title="五、OpenFeign的超时控制"></a>五、OpenFeign的超时控制</h3><h4 id="1、模拟长流程业务"><a href="#1、模拟长流程业务" class="headerlink" title="1、模拟长流程业务"></a>1、模拟长流程业务</h4><p>修改oss服务FileController的test方法，添加sleep 3秒：</p><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation</span>(value = <span class="hljs-string">"测试"</span>)<span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"test"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;    log.info(<span class="hljs-string">"oss test被调用"</span>);    <span class="hljs-keyword">try</span> &#123;        TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;        e.printStackTrace();    &#125;    <span class="hljs-keyword">return</span> R.ok();&#125;</code></pre><h4 id="2、远程调用测试"><a href="#2、远程调用测试" class="headerlink" title="2、远程调用测试"></a>2、远程调用测试</h4><p>上面的程序在测试时会出现远程调用超时错误。如下：因为OpenFeign默认等待1秒钟，否则超时报错</p><p>重试规则：每隔一秒发起重试</p><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span>  <span class="hljs-attr">MaxAutoRetries:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 同一实例最大重试次数，不包括首次调用，默认0</span>  <span class="hljs-attr">MaxAutoRetriesNextServer:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 重试其他实例的最大重试次数，不包括首次所选的server，默认1</span></code></pre><h4 id="3、解决"><a href="#3、解决" class="headerlink" title="3、解决"></a>3、解决</h4><p>application.yml文件中配置ribbon的超时时间（因为OpenFeing的底层即是对ribbon的封装）</p><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">10000</span> <span class="hljs-comment">#连接建立的超时时长，默认1秒</span>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">10000</span> <span class="hljs-comment">#处理请求的超时时间，默认为1秒</span></code></pre><h3 id="六、OpenFeign日志"><a href="#六、OpenFeign日志" class="headerlink" title="六、OpenFeign日志"></a>六、OpenFeign日志</h3><h4 id="1、作用"><a href="#1、作用" class="headerlink" title="1、作用"></a>1、作用</h4><p>OpenFeign提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解OpenFeign中Http请求的细节。即对OpenFeign远程接口调用的情况进行监控和日志输出。</p><h4 id="2、日志级别"><a href="#2、日志级别" class="headerlink" title="2、日志级别"></a>2、日志级别</h4><ul><li>NONE：默认级别，不显示日志</li><li>BASIC：仅记录请求方法、URL、响应状态及执行时间</li><li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应头信息</li><li>FULL：除了HEADERS中定义的信息之外，还有请求和响应正文及元数据信息</li></ul><h4 id="3、配置日志bean"><a href="#3、配置日志bean" class="headerlink" title="3、配置日志bean"></a>3、配置日志bean</h4><p>在service_edu中创建配置文件</p><pre><code class="hljs css"><span class="hljs-selector-tag">package</span> <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.guli</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.edu</span><span class="hljs-selector-class">.config</span>;<span class="hljs-keyword">@Configuration</span>public class OpenFeignConfig &#123;    <span class="hljs-keyword">@Bean</span>    Logger.Level feignLoggerLevel()&#123;        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">Logger</span><span class="hljs-selector-class">.Level</span><span class="hljs-selector-class">.FULL</span>;    &#125;&#125;</code></pre><h4 id="4、开启日志"><a href="#4、开启日志" class="headerlink" title="4、开启日志"></a>4、开启日志</h4><p>在service_edu中，application.yml中指定监控的接口，以及日志级别</p><pre><code class="hljs css"><span class="hljs-selector-tag">logging</span>:  <span class="hljs-selector-tag">level</span>:    <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.guli</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.edu</span><span class="hljs-selector-class">.feign</span><span class="hljs-selector-class">.OssFileService</span>: <span class="hljs-selector-tag">debug</span> #以什么级别监控哪个接口</code></pre>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Nacos</tag>
      
      <tag>服务注册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】前端项目开发流程</title>
    <link href="/2020/07/08/goujian/8.%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <url>/2020/07/08/goujian/8.%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】前端项目开发流程"><a href="#【项目创建流程】前端项目开发流程" class="headerlink" title="【项目创建流程】前端项目开发流程"></a>【项目创建流程】前端项目开发流程</h1><h2 id="定义路由模块"><a href="#定义路由模块" class="headerlink" title="定义路由模块"></a>定义路由模块</h2><pre><code class="hljs js"><span class="hljs-comment">// 课程管理</span>  &#123;    path: <span class="hljs-string">'/course'</span>,    component: Layout,    redirect: <span class="hljs-string">'/course/list'</span>,    name: <span class="hljs-string">'Course'</span>,    meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">'课程管理'</span> &#125;,    children: [      &#123;        path: <span class="hljs-string">'list'</span>,        name: <span class="hljs-string">'CourseList'</span>,        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/views/course/list'</span>),        meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">'课程列表'</span> &#125;      &#125;,      &#123;        path: <span class="hljs-string">'info'</span>,        name: <span class="hljs-string">'CourseInfo'</span>,        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/views/course/form'</span>),        meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">'发布课程'</span> &#125;      &#125;,      &#123;        path: <span class="hljs-string">'info/:id'</span>,        name: <span class="hljs-string">'CourseInfoEdit'</span>,        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/views/course/form'</span>),        meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">'编辑课程'</span> &#125;,        hidden: <span class="hljs-literal">true</span>      &#125;,      &#123;        path: <span class="hljs-string">'chapter/:id'</span>,        name: <span class="hljs-string">'CourseChapterEdit'</span>,        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'@/views/course/form'</span>),        meta: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">'编辑大纲'</span> &#125;,        hidden: <span class="hljs-literal">true</span>      &#125;    ]  &#125;,</code></pre><h2 id="定义api模块"><a href="#定义api模块" class="headerlink" title="定义api模块"></a>定义api模块</h2><pre><code class="hljs js"><span class="hljs-comment">// @ 符号在build/webpack.base.conf.js 中配置 表示 'src' 路径</span><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">'@/utils/request'</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  list() &#123;    <span class="hljs-keyword">return</span> request(&#123;      url: <span class="hljs-string">'/admin/edu/teacher/list'</span>,      method: <span class="hljs-string">'get'</span>    &#125;)  &#125;&#125;</code></pre><h2 id="定义页面组件脚本"><a href="#定义页面组件脚本" class="headerlink" title="定义页面组件脚本"></a>定义页面组件脚本</h2><pre><code class="hljs vu">&lt;script&gt;import teacherApi from &#39;@&#x2F;api&#x2F;teacher&#39;export default &#123;  &#x2F;&#x2F; 定义数据模型  data() &#123;    return &#123;      list: [] &#x2F;&#x2F; 讲师列表    &#125;  &#125;,  &#x2F;&#x2F; 页面渲染成功后获取数据  created() &#123;    this.fetchData()  &#125;,  &#x2F;&#x2F; 定义方法  methods: &#123;    fetchData() &#123;      &#x2F;&#x2F; 调用api      teacherApi.list().then(response &#x3D;&gt; &#123;        this.list &#x3D; response.data.items      &#125;)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;</code></pre><h2 id="定义页面组件模板"><a href="#定义页面组件模板" class="headerlink" title="定义页面组件模板"></a>定义页面组件模板</h2><pre><code class="hljs vue">&lt;template&gt;  &lt;div class&#x3D;&quot;app-container&quot;&gt;    讲师列表  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】前端业务总结</title>
    <link href="/2020/07/08/goujian/7.%E5%89%8D%E7%AB%AF%E4%B8%9A%E5%8A%A1/"/>
    <url>/2020/07/08/goujian/7.%E5%89%8D%E7%AB%AF%E4%B8%9A%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】前端业务总结"><a href="#【项目创建流程】前端业务总结" class="headerlink" title="【项目创建流程】前端业务总结"></a>【项目创建流程】前端业务总结</h1><h2 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h2><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>为方便后续开发，建议安装如下插件</p><p><img src="http://img1.jimu98.cn//blog/image-20200712144009425.png" srcset="/img/loading.gif" alt="image-20200712144009425"></p><p><img src="http://img1.jimu98.cn//blog/02.png" srcset="/img/loading.gif" alt="img"></p><p><img src="http://img1.jimu98.cn//blog/03.png" srcset="/img/loading.gif" alt="img"></p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><h4 id="JavaScript引擎"><a href="#JavaScript引擎" class="headerlink" title="JavaScript引擎"></a>JavaScript引擎</h4><p>浏览器的内核包括两部分核心：</p><ul><li><p>DOM渲染引擎</p></li><li><p>JavaScript解析引擎</p></li><li><ul><li>Chrome浏览器内置V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</li></ul></li></ul><h4 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h4><p>脱离浏览器环境也可以运行JavaScript，只要有JavaScript引擎就可以。</p><p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境：即Node.js内置了Chrome的V8 引擎，可以在Node.js环境中直接运行JavaScript程序。</p><ul><li><p>在Node.js中写JavaScript和在Chrome浏览器中写JavaScript<strong>基本</strong>没有什么不一样。哪里不一样呢？</p></li><li><ul><li>Node.js没有浏览器API，即document，window的等。</li><li>加了许多Node.js 专属API，例如文件系统，进程，http功能。</li></ul></li></ul><h4 id="Node-js有什么用"><a href="#Node-js有什么用" class="headerlink" title="Node.js有什么用"></a>Node.js有什么用</h4><ul><li><p>如果你想开发类似JavaWeb的简单的后端程序，那么学习Node.js是一个非常好的选择。</p></li><li><p>如果你想部署一些高性能的服务，那么学习Node.js也是一个非常好的选择。</p></li><li><ul><li>通常他会被用来作一个BFF层，即 Backend For Frontend（服务于前端的后端），通俗的说是一个专门用于为前端业务提供数据的后端程序</li></ul></li></ul><h4 id="BFF"><a href="#BFF" class="headerlink" title="BFF"></a>BFF</h4><h5 id="BFF-解决什么问题"><a href="#BFF-解决什么问题" class="headerlink" title="BFF 解决什么问题"></a>BFF 解决什么问题</h5><p>一个前端页面向 Service A、Service B 以及 Service C发送请求，不同的微服务返回的值用于渲染页面中不同的组件。此时，每次访问该页面都需要发送 3 个请求。我们需要一个服务来聚合Service A、Service B 以及 Service C响应的数据，这个服务层叫做BFF。</p><p><img src="http://img1.jimu98.cn//blog/BFF0_2.png" srcset="/img/loading.gif" alt="img"></p><p>手机、平板端、PC机等用户终端都需要向每个Service，例如Service A发送请求。对于同一个功能，不同的终端需要的数据格式和内容会有不同。此时 Service A 的一个接口，不能同时满足三个客户端的不同需求。我们可以在Service A中开发三个接口，也可以增加一个数据裁剪服务，将数据按照不同终端的不同要求进行裁剪，这个服务层叫做BFF。</p><p><img src="http://img1.jimu98.cn//blog/BFF1_2.png" srcset="/img/loading.gif" alt="img"></p><p>BFF层的作用是让前端有能力自由组装后台数据，减少大量的业务沟通成本，加快业务的迭代速度。无论是数据聚合还是数据剪裁，这类程序的特点是不需要太强大的服务器运算能力，但是对程序的灵活性有较高的要求，这两个特点都正好和Node.js的优势相吻合。</p><h5 id="什么是BFF"><a href="#什么是BFF" class="headerlink" title="什么是BFF"></a>什么是BFF</h5><p>用户体验适配器</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>双击安装 node-v10.14.2-x64.msi</p><blockquote><p>查看版本 node -v</p></blockquote><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><p>在为 AngularJS 工作之后，Vue 的作者尤雨溪开发出了这一框架。他声称自己的思路是提取 Angular 中为自己所喜欢的部分，构建出一款相当轻量的框架。Vue 最早发布于 2014 年 2 月。作者在 Hacker News、Echo JS 与 Reddit 的 javascript 版块发布了最早的版本。一天之内，Vue 就登上了这三个网站的首页。Vue 是 Github 上最受欢迎的开源项目之一。同时，在 JavaScript 框架/函数库中，Vue 所获得的星标数已超过 React，并高于 Backbone.js、Angular 2、jQuery 等项目。</p><p>Vue.js 是一款流行的 JavaScript 前端框架，目的是简化 Web 开发。Vue 所关注的核心是 MVC 模式中的视图层，同时，它也能方便地获取数据更新，实现视图与模型的交互。</p><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>axios是独立于vue的一个项目，可以用于浏览器和node.js中发送ajax请求</p><h3 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h3><h4 id="1、引入脚本库"><a href="#1、引入脚本库" class="headerlink" title="1、引入脚本库"></a>1、引入脚本库</h4><p><strong>在axios_pro文件夹中引入：</strong>element-ui\lib</p><p><img src="http://img1.jimu98.cn//blog/49b60e78-20d8-4928-a8b6-0b2250de4a84.png" srcset="/img/loading.gif" alt="img"></p><h4 id="2、引入css"><a href="#2、引入css" class="headerlink" title="2、引入css"></a>2、引入css</h4><p>在axios.html 的head中引入css</p><pre><code class="hljs js">&lt;!-- <span class="hljs-keyword">import</span> CSS --&gt;&lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</code></pre><h4 id="3、引入js"><a href="#3、引入js" class="headerlink" title="3、引入js"></a>3、引入js</h4><pre><code class="hljs js">&lt;script src=<span class="hljs-string">"element-ui/lib/index.js"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="4、渲染讲师列表"><a href="#4、渲染讲师列表" class="headerlink" title="4、渲染讲师列表"></a>4、渲染讲师列表</h4><p>注意：项目中的版本是2.4，参考对应版本的文档</p><pre><code class="hljs vue">&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;el-button&gt;添加&lt;&#x2F;el-button&gt;    &lt;i class&#x3D;&quot;el-icon-delete&quot;&gt;&lt;&#x2F;i&gt;    &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;el-icon-search&quot;&gt;搜索&lt;&#x2F;el-button&gt;    &lt;el-table              :data&#x3D;&quot;teacherList&quot;              stripe              border              style&#x3D;&quot;width: 100%&quot;&gt;        &lt;el-table-column              type&#x3D;&quot;selection&quot;              width&#x3D;&quot;55&quot;&gt;&lt;&#x2F;el-table-column&gt;        &lt;el-table-column              prop&#x3D;&quot;name&quot;              label&#x3D;&quot;姓名&quot;&gt;&lt;&#x2F;el-table-column&gt;        &lt;el-table-column              prop&#x3D;&quot;gmtCreate&quot;              label&#x3D;&quot;入驻日期&quot;&gt;&lt;&#x2F;el-table-column&gt;        &lt;el-table-column              label&#x3D;&quot;级别&quot;&gt;            &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;                &#123;&#123; scope.row.level &#x3D;&#x3D;&#x3D; 1?&#39;高级讲师&#39;:&#39;首席讲师&#39; &#125;&#125;            &lt;&#x2F;template&gt;        &lt;&#x2F;el-table-column&gt;    &lt;&#x2F;el-table&gt;&lt;&#x2F;div&gt;</code></pre><h3 id="NPM包管理器"><a href="#NPM包管理器" class="headerlink" title="NPM包管理器"></a>NPM包管理器</h3><h4 id="什么是NPM"><a href="#什么是NPM" class="headerlink" title="什么是NPM"></a>什么是NPM</h4><p>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于前端的Maven 。</p><pre><code class="hljs coffeescript"><span class="hljs-comment">#在命令提示符输入 npm -v 可查看当前npm版本</span><span class="hljs-built_in">npm</span> -v</code></pre><h4 id="1、项目初始化"><a href="#1、项目初始化" class="headerlink" title="1、项目初始化"></a><strong>1、项目初始化</strong></h4><pre><code class="hljs vala"><span class="hljs-meta">#建立一个空文件夹，在命令提示符进入该文件夹  执行命令初始化</span>npm init<span class="hljs-meta">#按照提示输入相关信息，如果是用默认值则直接回车即可。</span><span class="hljs-meta">#name: 项目名称</span><span class="hljs-meta">#version: 项目版本号</span><span class="hljs-meta">#description: 项目描述</span><span class="hljs-meta">#keywords: &#123;Array&#125;关键词，便于用户搜索到我们的项目</span><span class="hljs-meta">#最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml</span><span class="hljs-meta">#我们之后也可以根据需要进行修改。</span></code></pre><pre><code class="hljs coffeescript"><span class="hljs-comment">#如果想直接生成 package.json 文件，那么可以使用命令</span><span class="hljs-built_in">npm</span> init -y</code></pre><h4 id="2、修改npm镜像"><a href="#2、修改npm镜像" class="headerlink" title="2、修改npm镜像"></a><strong>2、修改npm镜像</strong></h4><p>NPM官方的管理的包都是从 <a href="http://npmjs.com下载的，但是这个网站在国内速度很慢。" target="_blank" rel="noopener">http://npmjs.com下载的，但是这个网站在国内速度很慢。</a></p><p>这里推荐使用淘宝 NPM 镜像 <a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a> ，淘宝 NPM 镜像是一个完整 npmjs.com 镜像，同步频率目前为 10分钟一次，以保证尽量与官方服务同步。</p><p><strong>设置镜像地址：</strong></p><pre><code class="hljs tcl"><span class="hljs-comment">#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</span>npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">registry</span> https://<span class="hljs-keyword">registry</span>.npm.taobao.org <span class="hljs-comment">#查看npm配置信息</span>npm config <span class="hljs-keyword">list</span></code></pre><h4 id="3、npm-install命令的使用"><a href="#3、npm-install命令的使用" class="headerlink" title="3、npm install命令的使用"></a><strong>3、npm install命令的使用</strong></h4><p>基本命令</p><pre><code class="hljs vala"><span class="hljs-meta">#使用 npm install 安装依赖包的最新版，</span><span class="hljs-meta">#模块安装的位置：项目目录\node_modules</span><span class="hljs-meta">#同时package.json 文件中，依赖包会被添加到dependencies节点下，类似maven中的 &lt;dependencies&gt;</span><span class="hljs-meta">#默认参数：--save  简写  -S  将当前依赖保存在dependencies节点下</span>npm install jquery</code></pre><p>下载特定版本的依赖</p><pre><code class="hljs angelscript">#如果安装时想指定特定的版本npm install <span class="hljs-symbol">jquery@</span><span class="hljs-number">2.1</span>.x</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>下载开发依赖</p><pre><code class="hljs vala"><span class="hljs-meta">#devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖</span><span class="hljs-meta">#使用 -D参数将依赖添加到devDependencies节点</span>npm install --save-dev eslint<span class="hljs-meta">#或简写</span>npm i -D eslint</code></pre><p>下载全局依赖</p><pre><code class="hljs vala"><span class="hljs-meta">#全局安装</span><span class="hljs-meta">#Node.js全局安装的npm包和工具的位置：用户目录\AppData\Roaming\npm\node_modules</span><span class="hljs-meta">#一些命令行工具常使用全局安装的方式</span>npm install --global webpack<span class="hljs-meta">#或简写</span>npm install -g webpack</code></pre><p>根据依赖下载安装包</p><pre><code class="hljs cmake"><span class="hljs-comment">#npm管理的项目在备份和传输的时候一般不携带node_modules文件夹</span><span class="hljs-comment">#安装会自动在项目目录下添加 package-lock.json文件，这个文件帮助锁定安装包的版本</span>npm <span class="hljs-keyword">install</span> <span class="hljs-comment">#根据package.json中的配置下载依赖，初始化项目</span></code></pre><h4 id="4、其它命令"><a href="#4、其它命令" class="headerlink" title="4、其它命令"></a><strong>4、其它命令</strong></h4><pre><code class="hljs coffeescript"><span class="hljs-comment">#更新包（更新到最新版本）</span><span class="hljs-built_in">npm</span> update 包名<span class="hljs-comment">#全局更新</span><span class="hljs-built_in">npm</span> update -g 包名<span class="hljs-comment">#卸载包</span><span class="hljs-built_in">npm</span> uninstall 包名<span class="hljs-comment">#全局卸载</span><span class="hljs-built_in">npm</span> uninstall -g 包名</code></pre>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>axios</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】非业务功能统一处理</title>
    <link href="/2020/07/08/goujian/6.%E9%9D%9E%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86/"/>
    <url>/2020/07/08/goujian/6.%E9%9D%9E%E4%B8%9A%E5%8A%A1%E5%8A%9F%E8%83%BD%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】非业务功能统一处理"><a href="#【项目创建流程】非业务功能统一处理" class="headerlink" title="【项目创建流程】非业务功能统一处理"></a>【项目创建流程】非业务功能统一处理</h1><h2 id="统一返回数据格式"><a href="#统一返回数据格式" class="headerlink" title="统一返回数据格式"></a>统一返回数据格式</h2><p>项目中我们会将响应封装成json返回，一般我们会将所有接口的数据格式统一， 使前端(iOS Android, Web)对数据的操作更一致、轻松。</p><p>一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含状态码、返回消息、数据这几部分内容</p><p>例如，我们的系统要求返回的基本数据格式如下：</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">"success"</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">"code"</span>: <span class="hljs-number">20000</span>,  <span class="hljs-attr">"message"</span>: <span class="hljs-string">"成功"</span>,  <span class="hljs-attr">"data"</span>: &#123;    <span class="hljs-attr">"items"</span>: [      &#123;        <span class="hljs-attr">"id"</span>: <span class="hljs-string">"1"</span>,        <span class="hljs-attr">"name"</span>: <span class="hljs-string">"刘德华"</span>,        <span class="hljs-attr">"intro"</span>: <span class="hljs-string">"毕业于师范大学数学系，热爱教育事业，执教数学思维6年有余"</span>      &#125;    ]  &#125;&#125;</code></pre><h3 id="定义统一返回结果"><a href="#定义统一返回结果" class="headerlink" title="定义统一返回结果"></a>定义统一返回结果</h3><h4 id="创建返回码定义枚举类"><a href="#创建返回码定义枚举类" class="headerlink" title="创建返回码定义枚举类"></a>创建返回码定义枚举类</h4><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><span class="hljs-meta">@ToString</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> ResultCodeEnum &#123;    SUCCESS(<span class="hljs-keyword">true</span>, <span class="hljs-number">20000</span>,<span class="hljs-string">"成功"</span>),    UNKNOWN_REASON(<span class="hljs-keyword">false</span>, <span class="hljs-number">20001</span>, <span class="hljs-string">"未知错误"</span>),    BAD_SQL_GRAMMAR(<span class="hljs-keyword">false</span>, <span class="hljs-number">21001</span>, <span class="hljs-string">"sql语法错误"</span>),    JSON_PARSE_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">21002</span>, <span class="hljs-string">"json解析异常"</span>),    PARAM_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">21003</span>, <span class="hljs-string">"参数不正确"</span>),    FILE_UPLOAD_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">21004</span>, <span class="hljs-string">"文件上传错误"</span>),    FILE_DELETE_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">21005</span>, <span class="hljs-string">"文件刪除错误"</span>),    EXCEL_DATA_IMPORT_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">21006</span>, <span class="hljs-string">"Excel数据导入错误"</span>),    VIDEO_UPLOAD_ALIYUN_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">22001</span>, <span class="hljs-string">"视频上传至阿里云失败"</span>),    VIDEO_UPLOAD_TOMCAT_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">22002</span>, <span class="hljs-string">"视频上传至业务服务器失败"</span>),    VIDEO_DELETE_ALIYUN_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">22003</span>, <span class="hljs-string">"阿里云视频文件删除失败"</span>),    FETCH_VIDEO_UPLOADAUTH_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">22004</span>, <span class="hljs-string">"获取上传地址和凭证失败"</span>),    REFRESH_VIDEO_UPLOADAUTH_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">22005</span>, <span class="hljs-string">"刷新上传地址和凭证失败"</span>),    FETCH_PLAYAUTH_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">22006</span>, <span class="hljs-string">"获取播放凭证失败"</span>),    URL_ENCODE_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">23001</span>, <span class="hljs-string">"URL编码失败"</span>),    ILLEGAL_CALLBACK_REQUEST_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">23002</span>, <span class="hljs-string">"非法回调请求"</span>),    FETCH_ACCESSTOKEN_FAILD(<span class="hljs-keyword">false</span>, <span class="hljs-number">23003</span>, <span class="hljs-string">"获取accessToken失败"</span>),    FETCH_USERINFO_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">23004</span>, <span class="hljs-string">"获取用户信息失败"</span>),    LOGIN_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">23005</span>, <span class="hljs-string">"登录失败"</span>),    COMMENT_EMPTY(<span class="hljs-keyword">false</span>, <span class="hljs-number">24006</span>, <span class="hljs-string">"评论内容必须填写"</span>),    PAY_RUN(<span class="hljs-keyword">false</span>, <span class="hljs-number">25000</span>, <span class="hljs-string">"支付中"</span>),    PAY_UNIFIEDORDER_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">25001</span>, <span class="hljs-string">"统一下单错误"</span>),    PAY_ORDERQUERY_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">25002</span>, <span class="hljs-string">"查询支付结果错误"</span>),    ORDER_EXIST_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">25003</span>, <span class="hljs-string">"课程已购买"</span>),    GATEWAY_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">26000</span>, <span class="hljs-string">"服务不能访问"</span>),    CODE_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">28000</span>, <span class="hljs-string">"验证码错误"</span>),    LOGIN_PHONE_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">28009</span>, <span class="hljs-string">"手机号码不正确"</span>),    LOGIN_MOBILE_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">28001</span>, <span class="hljs-string">"账号不正确"</span>),    LOGIN_PASSWORD_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">28008</span>, <span class="hljs-string">"密码不正确"</span>),    LOGIN_DISABLED_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">28002</span>, <span class="hljs-string">"该用户已被禁用"</span>),    REGISTER_MOBLE_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">28003</span>, <span class="hljs-string">"手机号已被注册"</span>),    LOGIN_AUTH(<span class="hljs-keyword">false</span>, <span class="hljs-number">28004</span>, <span class="hljs-string">"需要登录"</span>),    LOGIN_ACL(<span class="hljs-keyword">false</span>, <span class="hljs-number">28005</span>, <span class="hljs-string">"没有权限"</span>),    SMS_SEND_ERROR(<span class="hljs-keyword">false</span>, <span class="hljs-number">28006</span>, <span class="hljs-string">"短信发送失败"</span>),    SMS_SEND_ERROR_BUSINESS_LIMIT_CONTROL(<span class="hljs-keyword">false</span>, <span class="hljs-number">28007</span>, <span class="hljs-string">"短信发送过于频繁"</span>);    <span class="hljs-keyword">private</span> Boolean success;    <span class="hljs-keyword">private</span> Integer code;    <span class="hljs-keyword">private</span> String message;    ResultCodeEnum(Boolean success, Integer code, String message) &#123;        <span class="hljs-keyword">this</span>.success = success;        <span class="hljs-keyword">this</span>.code = code;        <span class="hljs-keyword">this</span>.message = message;    &#125;&#125;</code></pre><h4 id="创建结果类"><a href="#创建结果类" class="headerlink" title="创建结果类"></a>创建结果类</h4><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@ApiModel</span>(value = <span class="hljs-string">"全局统一返回结果"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span> </span>&#123;    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"是否成功"</span>)    <span class="hljs-keyword">private</span> Boolean success;    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"返回码"</span>)    <span class="hljs-keyword">private</span> Integer code;    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"返回消息"</span>)    <span class="hljs-keyword">private</span> String message;    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"返回数据"</span>)    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">R</span><span class="hljs-params">()</span></span>&#123;&#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">ok</span><span class="hljs-params">()</span></span>&#123;        R r = <span class="hljs-keyword">new</span> R();        r.setSuccess(ResultCodeEnum.SUCCESS.getSuccess());        r.setCode(ResultCodeEnum.SUCCESS.getCode());        r.setMessage(ResultCodeEnum.SUCCESS.getMessage());        <span class="hljs-keyword">return</span> r;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">error</span><span class="hljs-params">()</span></span>&#123;        R r = <span class="hljs-keyword">new</span> R();        r.setSuccess(ResultCodeEnum.UNKNOWN_REASON.getSuccess());        r.setCode(ResultCodeEnum.UNKNOWN_REASON.getCode());        r.setMessage(ResultCodeEnum.UNKNOWN_REASON.getMessage());        <span class="hljs-keyword">return</span> r;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">setResult</span><span class="hljs-params">(ResultCodeEnum resultCodeEnum)</span></span>&#123;        R r = <span class="hljs-keyword">new</span> R();        r.setSuccess(resultCodeEnum.getSuccess());        r.setCode(resultCodeEnum.getCode());        r.setMessage(resultCodeEnum.getMessage());        <span class="hljs-keyword">return</span> r;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">success</span><span class="hljs-params">(Boolean success)</span></span>&#123;        <span class="hljs-keyword">this</span>.setSuccess(success);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">message</span><span class="hljs-params">(String message)</span></span>&#123;        <span class="hljs-keyword">this</span>.setMessage(message);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">code</span><span class="hljs-params">(Integer code)</span></span>&#123;        <span class="hljs-keyword">this</span>.setCode(code);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">data</span><span class="hljs-params">(String key, Object value)</span></span>&#123;        <span class="hljs-keyword">this</span>.data.put(key, value);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">data</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span></span>&#123;        <span class="hljs-keyword">this</span>.setData(map);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;    &#125;&#125;</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"list"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">listAll</span><span class="hljs-params">()</span></span>&#123;    List&lt;Teacher&gt; list = teacherService.list();    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">"items"</span>, list).message(<span class="hljs-string">"获取讲师列表成功"</span>);&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">"remove/&#123;id&#125;"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">removeById</span><span class="hljs-params">(@PathVariable String id)</span></span>&#123;    <span class="hljs-keyword">boolean</span> result = teacherService.removeById(id);    <span class="hljs-keyword">if</span>(result)&#123;        <span class="hljs-keyword">return</span> R.ok().message(<span class="hljs-string">"删除成功"</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">"数据不存在"</span>);    &#125;&#125;</code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="Controller创建分页方法"><a href="#Controller创建分页方法" class="headerlink" title="Controller创建分页方法"></a>Controller创建分页方法</h3><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"list/&#123;page&#125;/&#123;limit&#125;"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">listPage</span><span class="hljs-params">(@ApiParam(value = <span class="hljs-string">"当前页码"</span>, required = <span class="hljs-keyword">true</span>)</span> @PathVariable Long page,</span><span class="hljs-function">                  @<span class="hljs-title">ApiParam</span><span class="hljs-params">(value = <span class="hljs-string">"每页记录数"</span>, required = <span class="hljs-keyword">true</span>)</span> @PathVariable Long limit,</span><span class="hljs-function">                  @<span class="hljs-title">ApiParam</span><span class="hljs-params">(<span class="hljs-string">"讲师列表查询对象"</span>)</span> TeacherQueryVo teacherQueryVo)</span>&#123;    IPage&lt;Teacher&gt; pageModel = teacherService.selectPage(page, limit, teacherQueryVo);    List&lt;Teacher&gt; records = pageModel.getRecords();    <span class="hljs-keyword">long</span> total = pageModel.getTotal();    <span class="hljs-keyword">return</span>  R.ok().data(<span class="hljs-string">"total"</span>, total).data(<span class="hljs-string">"rows"</span>, records);&#125;</code></pre><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><blockquote><p>在我们平时写项目的时候，一般查询数据字段可能只需要三四个，但是数据库里面有十多个，甚至多数据库，多表查询</p><p>这时候就要根据返回类型创建Vo对象</p></blockquote><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherQueryVo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;        <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer level;    <span class="hljs-keyword">private</span> String joinDateBegin;    <span class="hljs-keyword">private</span> String joinDateEnd;&#125;</code></pre><blockquote><p>创建完实体类，就需要写条件查询了</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.guli.service.edu.service.impl;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">TeacherMapper</span>, <span class="hljs-title">Teacher</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">TeacherService</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> IPage&lt;Teacher&gt; <span class="hljs-title">selectPage</span><span class="hljs-params">(Long page, Long limit, TeacherQueryVo teacherQueryVo)</span> </span>&#123;                Page&lt;Teacher&gt; pageParam = <span class="hljs-keyword">new</span> Page&lt;&gt;(page, limit);                QueryWrapper&lt;Teacher&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();        queryWrapper.orderByAsc(<span class="hljs-string">"sort"</span>);        <span class="hljs-keyword">if</span> (teacherQueryVo == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> baseMapper.selectPage(pageParam, queryWrapper);        &#125;        String name = teacherQueryVo.getName();        Integer level = teacherQueryVo.getLevel();        String begin = teacherQueryVo.getJoinDateBegin();        String end = teacherQueryVo.getJoinDateEnd();        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(name)) &#123;            <span class="hljs-comment">//左%会使索引失效</span>            queryWrapper.likeRight(<span class="hljs-string">"name"</span>, name);        &#125;        <span class="hljs-keyword">if</span> (level != <span class="hljs-keyword">null</span>) &#123;            queryWrapper.eq(<span class="hljs-string">"level"</span>, level);        &#125;        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(begin)) &#123;            queryWrapper.ge(<span class="hljs-string">"join_date"</span>, begin);        &#125;        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(end)) &#123;            queryWrapper.le(<span class="hljs-string">"join_date"</span>, end);        &#125;        <span class="hljs-keyword">return</span> baseMapper.selectPage(pageParam, queryWrapper);    &#125;&#125;</code></pre><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><p>我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么需要统一异常处理</p><h3 id="创建统一异常处理器"><a href="#创建统一异常处理器" class="headerlink" title="创建统一异常处理器"></a>创建统一异常处理器</h3><blockquote><p>一般创建在service-base中handler包中，</p></blockquote><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;    <span class="hljs-meta">@ExceptionHandler</span>(Exception<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><span class="hljs-class">    @<span class="hljs-title">ResponseBody</span></span><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">R</span> <span class="hljs-title">error</span>(<span class="hljs-title">Exception</span> <span class="hljs-title">e</span>)</span>&#123;        e.printStackTrace();        <span class="hljs-keyword">return</span> R.error();    &#125;&#125;</code></pre><blockquote><p>例如上面就可以捕获所有异常</p><p>但是在实际项目中，可以通过抛出指定异常，然后捕获自定义异常来返回异常信息</p></blockquote><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><h2 id="1、创建自定义异常类"><a href="#1、创建自定义异常类" class="headerlink" title="1、创建自定义异常类"></a><strong>1、创建自定义异常类</strong></h2><p>service-base模块中创建cn.jimu98.guli.service.base.exception包，</p><p>创建GuliException.java通用异常类 继承 RuntimeException，RuntimeException 对代码没有侵入性</p><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuliException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;    <span class="hljs-comment">//状态码</span>    <span class="hljs-keyword">private</span> Integer code;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 接受状态码和消息</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GuliException</span><span class="hljs-params">(Integer code, String message)</span> </span>&#123;        <span class="hljs-keyword">super</span>(message);        <span class="hljs-keyword">this</span>.code=code;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 接收枚举类型</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultCodeEnum</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GuliException</span><span class="hljs-params">(ResultCodeEnum resultCodeEnum)</span> </span>&#123;        <span class="hljs-keyword">super</span>(resultCodeEnum.getMessage());        <span class="hljs-keyword">this</span>.code = resultCodeEnum.getCode();    &#125;&#125;</code></pre><h2 id="2、添加异常处理方法"><a href="#2、添加异常处理方法" class="headerlink" title="2、添加异常处理方法"></a>2、添加异常处理方法</h2><p>GlobalExceptionHandler.java中添加</p><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler</span>(GuliException<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><span class="hljs-class">@<span class="hljs-title">ResponseBody</span></span><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">R</span> <span class="hljs-title">error</span>(<span class="hljs-title">GuliException</span> <span class="hljs-title">e</span>)</span>&#123;    log.error(ExceptionUtils.getMessage(e));    <span class="hljs-keyword">return</span> R.error().message(e.getMessage()).code(e.getCode());&#125;</code></pre><h2 id="3、修改FileController"><a href="#3、修改FileController" class="headerlink" title="3、修改FileController"></a>3、修改FileController</h2><p>在类上添加日志注解</p><pre><code class="hljs aspectj"><span class="hljs-meta">@Slf</span>4j</code></pre><p>业务中需要的位置抛出GuliException</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">upload</span><span class="hljs-params">(...)</span> </span>&#123;    <span class="hljs-keyword">try</span> &#123;        ......    &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;        log.error(ExceptionUtils.getMessage(e));        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(ResultCodeEnum.FILE_UPLOAD_ERROR);    &#125;&#125;</code></pre><h2 id="4、打印完整的异常信息"><a href="#4、打印完整的异常信息" class="headerlink" title="4、打印完整的异常信息"></a>4、打印完整的异常信息</h2><p>GuliException类中重写toString方法</p><pre><code class="hljs kotlin"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> String toString() &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"GuliException&#123;"</span> +        <span class="hljs-string">"code="</span> + code +        <span class="hljs-string">", message="</span> + <span class="hljs-keyword">this</span>.getMessage() +        <span class="hljs-string">'&#125;'</span>;&#125;</code></pre><h2 id="三、前端错误处理"><a href="#三、前端错误处理" class="headerlink" title="三、前端错误处理"></a>三、前端错误处理</h2><h2 id="1、统一异常错误处理"><a href="#1、统一异常错误处理" class="headerlink" title="1、统一异常错误处理"></a>1、统一异常错误处理</h2><pre><code class="hljs stylus"><span class="hljs-comment">// 上传成功回调</span><span class="hljs-function"><span class="hljs-title">handleAvatarSuccess</span><span class="hljs-params">(res, file)</span></span> &#123;    console.log(res)    <span class="hljs-keyword">if</span> (res.success) &#123;        <span class="hljs-comment">// console.log(res)</span>        this<span class="hljs-selector-class">.teacher</span><span class="hljs-selector-class">.avatar</span> = res<span class="hljs-selector-class">.data</span>.url        <span class="hljs-comment">// 强制重新渲染</span>        this.<span class="hljs-variable">$forceUpdate</span>()    &#125; <span class="hljs-keyword">else</span> &#123;        this.<span class="hljs-variable">$message</span>.error(<span class="hljs-string">'上传失败 （非20000）'</span>)    &#125;&#125;,</code></pre><h2 id="2、http异常错误处理"><a href="#2、http异常错误处理" class="headerlink" title="2、http异常错误处理"></a>2、http异常错误处理</h2><p>注册事件</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span> <span class="hljs-attr">:on-error</span>=<span class="hljs-string">"handleAvatarError"</span>&gt;</span></code></pre><p>事件函数</p><pre><code class="hljs js"><span class="hljs-comment">// 错误处理</span>handleAvatarError() &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'error'</span>)    <span class="hljs-keyword">this</span>.$message.error(<span class="hljs-string">'上传失败（http失败）'</span>)&#125;</code></pre><h2 id="统一日志处理"><a href="#统一日志处理" class="headerlink" title="统一日志处理"></a>统一日志处理</h2><h3 id="配置日志级别"><a href="#配置日志级别" class="headerlink" title="配置日志级别"></a>配置日志级别</h3><p>日志记录器（Logger）的行为是分等级的。如下表所示：</p><p>分为：FATAL、ERROR、WARN、INFO、DEBUG</p><p>默认情况下，spring boot从控制台打印出来的日志级别只有INFO及以上级别，可以配置日志级别</p><pre><code class="hljs yaml"><span class="hljs-comment"># 设置日志级别</span><span class="hljs-attr">logging:</span>  <span class="hljs-attr">level:</span>    <span class="hljs-attr">root:</span> <span class="hljs-string">ERROR</span></code></pre><p>这种方式能将ERROR级别以及以上级别的日志打印在控制台上</p><h3 id="Logback日志"><a href="#Logback日志" class="headerlink" title="Logback日志"></a>Logback日志</h3><p>spring boot内部使用Logback作为日志实现的框架。</p><p>Logback和log4j非常相似，如果你对log4j很熟悉，那对logback很快就会得心应手。</p><p>logback相对于log4j的一些优点：<a href="https://blog.csdn.net/caisini_vc/article/details/48551287" target="_blank" rel="noopener">https://blog.csdn.net/caisini_vc/article/details/48551287</a></p><h4 id="配置logback日志"><a href="#配置logback日志" class="headerlink" title="配置logback日志"></a>配置logback日志</h4><p><strong>删除application.yml中的日志配置</strong></p><p><strong>安装idea彩色日志插件：grep console</strong></p><p>resources 中创建 logback-spring.xml （默认日志的名字，必须是这个名字）</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>  <span class="hljs-attr">scan</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">"10 seconds"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"log.path"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"D:/project/helen/guli_log/edu"</span> /&gt;</span>    <span class="hljs-comment">&lt;!--控制台日志格式：彩色日志--&gt;</span>    <span class="hljs-comment">&lt;!-- magenta:洋红 --&gt;</span>    <span class="hljs-comment">&lt;!-- boldMagenta:粗红--&gt;</span>    <span class="hljs-comment">&lt;!-- cyan:青色 --&gt;</span>    <span class="hljs-comment">&lt;!-- white:白色 --&gt;</span>    <span class="hljs-comment">&lt;!-- magenta:洋红 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CONSOLE_LOG_PATTERN"</span></span><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">"%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--文件日志格式--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"FILE_LOG_PATTERN"</span></span><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">"%date&#123;yyyy-MM-dd HH:mm:ss&#125; |%-5level |%thread |%file:%line |%logger |%msg%n"</span> /&gt;</span>    <span class="hljs-comment">&lt;!--编码--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ENCODING"</span></span><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CONSOLE"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志级别--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>DEBUG<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志格式--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志字符集--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!--输出到文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"INFO_FILE"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>        <span class="hljs-comment">&lt;!--日志过滤器：此日志文件只记录INFO级别的--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span>            <span class="hljs-comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"WARN_FILE"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 日志过滤器：此日志文件只记录WARN级别的 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>WARN<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ERROR_FILE"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 日志过滤器：此日志文件只记录ERROR级别的 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!--开发环境--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dev"</span>&gt;</span>        <span class="hljs-comment">&lt;!--可以灵活设置此处，从而控制日志的输出--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"DEBUG"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"CONSOLE"</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"INFO_FILE"</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"WARN_FILE"</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ERROR_FILE"</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>    <span class="hljs-comment">&lt;!--生产环境--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pro"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"ERROR"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ERROR_FILE"</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h4 id="用日志记录器记录错误日志"><a href="#用日志记录器记录错误日志" class="headerlink" title="用日志记录器记录错误日志"></a>用日志记录器记录错误日志</h4><blockquote><p>类上添加注解@Slf4j</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Controller</tag>
      
      <tag>统一处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】配置Swagger</title>
    <link href="/2020/07/08/goujian/5.%E9%85%8D%E7%BD%AESwagger/"/>
    <url>/2020/07/08/goujian/5.%E9%85%8D%E7%BD%AESwagger/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】配置Swagger"><a href="#【项目创建流程】配置Swagger" class="headerlink" title="【项目创建流程】配置Swagger"></a>【项目创建流程】配置Swagger</h1><h2 id="Swagger2介绍"><a href="#Swagger2介绍" class="headerlink" title="Swagger2介绍"></a>Swagger2介绍</h2><p><a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p><p>前后端分离开发模式中，api文档是最好的沟通方式。</p><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>及时性 (接口变更后，能够及时准确地通知相关前后端开发人员)规范性 (并且保证接口的规范性，如接口的地址，请求方式，参数及响应格式和错误信息)一致性 (接口信息一致，不会出现因开发人员拿到的文档版本不一致，而出现分歧)可测性 (直接在接口文档上进行测试，以方便理解业务)</p><ul><li>前端工程师编写接口文档（使用swagger2编辑器或其他接口生成工具）</li><li>交给后端工程师</li><li>根据swagger文档编写后端接口</li><li>最终根据生成的swagger文件进行接口联调</li></ul><h2 id="配置Swagger2"><a href="#配置Swagger2" class="headerlink" title="配置Swagger2"></a>配置Swagger2</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><blockquote><p>这个可以配置在common中  进行代码复用</p></blockquote><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--swagger--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="创建Swagger2配置文件"><a href="#创建Swagger2配置文件" class="headerlink" title="创建Swagger2配置文件"></a>创建Swagger2配置文件</h3><blockquote><p>在service_base中创建Swagger2Config</p></blockquote><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableSwagger</span>2<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger2Config</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">webApiConfig</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .groupName(<span class="hljs-string">"webApi"</span>)                .apiInfo(webApiInfo())                .select()                <span class="hljs-comment">//只显示api路径下的页面</span>                .paths(Predicates.and(PathSelectors.regex(<span class="hljs-string">"/api/.*"</span>)))                .build();    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">adminApiConfig</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .groupName(<span class="hljs-string">"adminApi"</span>)                .apiInfo(adminApiInfo())                .select()                <span class="hljs-comment">//只显示admin路径下的页面</span>                .paths(Predicates.and(PathSelectors.regex(<span class="hljs-string">"/admin/.*"</span>)))                .build();    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">webApiInfo</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()                .title(<span class="hljs-string">"网站前台-API文档"</span>)                .description(<span class="hljs-string">"本文档描述了网站微服务接口定义"</span>)                .version(<span class="hljs-string">"1.0"</span>)                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">"Jimu98"</span>, <span class="hljs-string">"http://www.jimu98.cn"</span>, <span class="hljs-string">"z591593455@qq.com"</span>))                .build();    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">adminApiInfo</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()                .title(<span class="hljs-string">"后台管理系统-API文档"</span>)                .description(<span class="hljs-string">"本文档描述了后台管理系统微服务接口定义"</span>)                .version(<span class="hljs-string">"1.0"</span>)                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">"Jimu98"</span>, <span class="hljs-string">"http://www.jimu98.cn"</span>, <span class="hljs-string">"z591593455@qq.com"</span>))                .build();    &#125;&#125;</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote><p><a href="http://localhost:8101/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8101/swagger-ui.html</a>  进行测试</p></blockquote><h3 id="定义接口说明和参数说明"><a href="#定义接口说明和参数说明" class="headerlink" title="定义接口说明和参数说明"></a>定义接口说明和参数说明</h3><p>定义在类上：@Api</p><p>定义在方法上：@ApiOperation</p><p>定义在参数上：@ApiParam</p>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Controller</tag>
      
      <tag>Swagger2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】普通接口开发</title>
    <link href="/2020/07/08/goujian/4.%E6%99%AE%E9%80%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/"/>
    <url>/2020/07/08/goujian/4.%E6%99%AE%E9%80%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】普通接口开发"><a href="#【项目创建流程】普通接口开发" class="headerlink" title="【项目创建流程】普通接口开发"></a>【项目创建流程】普通接口开发</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><blockquote><p>创建的时候选择utf8mb4  urf8修改了兼容四字节的字符，解决某些汉字出现乱码问题</p><p>utf8_general_ci: 校对速度快，但准确度稍差。</p><p>utf8_unicode_ci: 准确度高，但校对速度稍慢。</p><p>若数据库中有德语、法语或者俄语需求，需使用utf8_unicode_ci。其他情况用utf8_general_ci即可。</p></blockquote><h2 id="建Maven"><a href="#建Maven" class="headerlink" title="建Maven"></a>建Maven</h2><h2 id="改POM"><a href="#改POM" class="headerlink" title="改POM"></a>改POM</h2><h2 id="写YML"><a href="#写YML" class="headerlink" title="写YML"></a>写YML</h2><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8140</span> <span class="hljs-comment"># 服务端口</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 环境设置</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">service-cms</span> <span class="hljs-comment"># 服务名</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos服务地址</span>    <span class="hljs-attr">sentinel:</span>      <span class="hljs-attr">transport:</span>        <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span>          <span class="hljs-attr">datasource:</span> <span class="hljs-comment"># mysql数据库连接</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/guli_cms?serverTimezone=GMT%2B8</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><span class="hljs-comment">#spring:</span>  <span class="hljs-attr">jackson:</span> <span class="hljs-comment">#返回json的全局时间格式</span>    <span class="hljs-attr">date-format:</span> <span class="hljs-string">yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss</span>    <span class="hljs-attr">time-zone:</span> <span class="hljs-string">GMT+8</span><span class="hljs-attr">mybatis-plus:</span>  <span class="hljs-attr">configuration:</span>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="hljs-comment">#mybatis日志</span>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:cn/jimu98/guli/service/cms/mapper/xml/*.xml</span><span class="hljs-attr">ribbon:</span>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">10000</span> <span class="hljs-comment">#连接建立的超时时长，默认1秒</span>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">10000</span> <span class="hljs-comment">#处理请求的超时时间，默认为1秒</span><span class="hljs-attr">feign:</span>  <span class="hljs-attr">sentinel:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span></code></pre><h2 id="主启动"><a href="#主启动" class="headerlink" title="主启动"></a>主启动</h2><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@ComponentScan</span>(&#123;<span class="hljs-string">"cn.jimu98.guli"</span>&#125;)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceEduApplication</span> </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(ServiceEduApplication<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">args</span>)</span>;    &#125;&#125;</code></pre><h2 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h2><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin</span> <span class="hljs-comment">//解决跨域问题</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/admin/edu/teacher"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> TeacherService teacherService;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"list"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Teacher&gt; <span class="hljs-title">listAll</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> teacherService.list();    &#125;&#125;</code></pre><h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><blockquote><p>项目经理不让用就自己写吧。。。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Controller</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】MyBatisPlas流程</title>
    <link href="/2020/07/08/goujian/3.MyBatisPlas%E6%B5%81%E7%A8%8B/"/>
    <url>/2020/07/08/goujian/3.MyBatisPlas%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】MyBatisPlas流程"><a href="#【项目创建流程】MyBatisPlas流程" class="headerlink" title="【项目创建流程】MyBatisPlas流程"></a>【项目创建流程】MyBatisPlas流程</h1><h2 id="MP简介"><a href="#MP简介" class="headerlink" title="MP简介"></a>MP简介</h2><p><a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><ul><li><p>润物无声  </p></li><li><ul><li>只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑。</li></ul></li><li><p>效率至上</p></li><li><ul><li>只需简单配置，即可快速进行 CRUD 操作，从而节省大量时间。</li></ul></li><li><p>丰富功能</p></li><li><ul><li>热加载、代码生成、分页、性能分析等功能一应俱全。</li></ul></li></ul><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><h3 id="创建代码生成器"><a href="#创建代码生成器" class="headerlink" title="创建代码生成器"></a>创建代码生成器</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodeGenerator</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">genCode</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">//String prefix = "dbxxx_";</span>        String moduleName = <span class="hljs-string">"statistics"</span>;        <span class="hljs-comment">// 1、创建代码生成器</span>        AutoGenerator mpg = <span class="hljs-keyword">new</span> AutoGenerator();        <span class="hljs-comment">// 2、全局配置</span>        GlobalConfig gc = <span class="hljs-keyword">new</span> GlobalConfig();        String projectPath = System.getProperty(<span class="hljs-string">"user.dir"</span>);        gc.setOutputDir(projectPath + <span class="hljs-string">"/src/main/java"</span>);        gc.setAuthor(<span class="hljs-string">"jimu98"</span>);        gc.setOpen(<span class="hljs-keyword">false</span>); <span class="hljs-comment">//生成后是否打开资源管理器</span><span class="hljs-comment">//        gc.setFileOverride(false); //重新生成时文件是否覆盖</span>        gc.setServiceName(<span class="hljs-string">"%sService"</span>);<span class="hljs-comment">//去掉Service接口的首字母I</span>        gc.setIdType(IdType.ASSIGN_ID); <span class="hljs-comment">//主键策略</span>        gc.setDateType(DateType.ONLY_DATE);<span class="hljs-comment">//定义生成的实体类中日期类型</span>        gc.setSwagger2(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//开启Swagger2模式</span>        mpg.setGlobalConfig(gc);        <span class="hljs-comment">// 3、数据源配置</span>        DataSourceConfig dsc = <span class="hljs-keyword">new</span> DataSourceConfig();        dsc.setUrl(<span class="hljs-string">"jdbc:mysql://localhost:3306/"</span>  + <span class="hljs-string">"guli_"</span> + moduleName + <span class="hljs-string">"?serverTimezone=GMT%2B8"</span>);        dsc.setDriverName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);        dsc.setUsername(<span class="hljs-string">"root"</span>);        dsc.setPassword(<span class="hljs-string">""</span>);        dsc.setDbType(DbType.MYSQL);        mpg.setDataSource(dsc);        <span class="hljs-comment">// 4、包配置</span>        PackageConfig pc = <span class="hljs-keyword">new</span> PackageConfig();        pc.setModuleName(moduleName); <span class="hljs-comment">//模块名</span>        pc.setParent(<span class="hljs-string">"cn.jimu98.guli.service"</span>);        pc.setController(<span class="hljs-string">"controller"</span>);        pc.setEntity(<span class="hljs-string">"entity"</span>);        pc.setService(<span class="hljs-string">"service"</span>);        pc.setMapper(<span class="hljs-string">"mapper"</span>);        mpg.setPackageInfo(pc);        <span class="hljs-comment">// 5、策略配置</span>        StrategyConfig strategy = <span class="hljs-keyword">new</span> StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="hljs-comment">//数据库表映射到实体的命名策略</span>        strategy.setTablePrefix(moduleName + <span class="hljs-string">"_"</span>);<span class="hljs-comment">//设置表前缀不生成</span>        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="hljs-comment">//数据库表字段映射到实体的命名策略</span>        strategy.setEntityLombokModel(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span>        strategy.setLogicDeleteFieldName(<span class="hljs-string">"is_deleted"</span>);<span class="hljs-comment">//逻辑删除字段名</span>        strategy.setEntityBooleanColumnRemoveIsPrefix(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//去掉布尔值的is_前缀</span>        <span class="hljs-comment">//自动填充</span>        TableFill gmtCreate = <span class="hljs-keyword">new</span> TableFill(<span class="hljs-string">"gmt_create"</span>, FieldFill.INSERT);        TableFill gmtModified = <span class="hljs-keyword">new</span> TableFill(<span class="hljs-string">"gmt_modified"</span>, FieldFill.INSERT_UPDATE);        ArrayList&lt;TableFill&gt; tableFills = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        tableFills.add(gmtCreate);        tableFills.add(gmtModified);        strategy.setTableFillList(tableFills);        strategy.setRestControllerStyle(<span class="hljs-keyword">true</span>); <span class="hljs-comment">//restful api风格控制器</span>        strategy.setControllerMappingHyphenStyle(<span class="hljs-keyword">true</span>); <span class="hljs-comment">//url中驼峰转连字符</span>        mpg.setStrategy(strategy);        <span class="hljs-comment">//设置BaseEntity</span>        strategy.setSuperEntityClass(<span class="hljs-string">"cn.jimu98.guli.service.base.model.BaseEntity"</span>);        <span class="hljs-comment">// 填写BaseEntity中的公共字段</span>        strategy.setSuperEntityColumns(<span class="hljs-string">"id"</span>, <span class="hljs-string">"gmt_create"</span>, <span class="hljs-string">"gmt_modified"</span>);        <span class="hljs-comment">// 6、执行</span>        mpg.execute();    &#125;&#125;</code></pre><h3 id="优化代码生成器"><a href="#优化代码生成器" class="headerlink" title="优化代码生成器"></a>优化代码生成器</h3><blockquote><p>在真实情况下，每个表都会有三字段，ID，创建时间，更新时间</p><p>所以，这部分实体类可以抽取出来</p><p>一般我们在service_base中创建BaseEntity</p></blockquote><h4 id="首先创建一个基础实体类"><a href="#首先创建一个基础实体类" class="headerlink" title="首先创建一个基础实体类"></a>首先创建一个基础实体类</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.jimu98.service.base.model;<span class="hljs-meta">@Data</span><span class="hljs-meta">@EqualsAndHashCode</span>(callSuper = <span class="hljs-keyword">false</span>)<span class="hljs-meta">@Accessors</span>(chain = <span class="hljs-keyword">true</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID=<span class="hljs-number">1L</span>;    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"讲师ID"</span>)  <span class="hljs-comment">//这个是swagger的注解</span>    <span class="hljs-meta">@TableId</span>(value = <span class="hljs-string">"id"</span>, type = IdType.ASSIGN_ID)    <span class="hljs-keyword">private</span> String id;    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"创建时间"</span>)    <span class="hljs-meta">@TableField</span>(fill = FieldFill.INSERT)    <span class="hljs-keyword">private</span> Date gmtCreate;    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"更新时间"</span>)    <span class="hljs-meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)    <span class="hljs-keyword">private</span> Date gmtModified;&#125;</code></pre><h4 id="然后修改代码生成器中内容"><a href="#然后修改代码生成器中内容" class="headerlink" title="然后修改代码生成器中内容"></a>然后修改代码生成器中内容</h4><pre><code class="hljs java"><span class="hljs-comment">//设置BaseEntity</span>strategy.setSuperEntityClass(<span class="hljs-string">"com.atguigu.guli.service.base.model.BaseEntity"</span>);<span class="hljs-comment">// 填写BaseEntity中的公共字段</span>strategy.setSuperEntityColumns(<span class="hljs-string">"id"</span>, <span class="hljs-string">"gmt_create"</span>, <span class="hljs-string">"gmt_modified"</span>);</code></pre><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><blockquote><p>@TableId(type = IdType.ASSIGN_ID)</p></blockquote><ul><li>描述：主键注解</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">主键字段名</td></tr><tr><td align="center">type</td><td align="center">Enum</td><td align="center">否</td><td align="center">IdType.NONE</td><td align="center">主键类型</td></tr></tbody></table><ul><li>type</li></ul><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center">数据库ID自增</td></tr><tr><td align="center">NONE</td><td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td align="center">INPUT</td><td align="center">insert前自行set主键值</td></tr><tr><td align="center">ASSIGN_ID</td><td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="center">ASSIGN_UUID</td><td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td></tr><tr><td align="center">ID_WORKER</td><td align="center">分布式全局唯一ID 长整型类型(please use <code>ASSIGN_ID</code>)</td></tr><tr><td align="center">UUID</td><td align="center">32位UUID字符串(please use <code>ASSIGN_UUID</code>)</td></tr><tr><td align="center">ID_WORKER_STR</td><td align="center">分布式全局唯一ID 字符串类型(please use <code>ASSIGN_ID</code>)</td></tr></tbody></table><p>要想影响所有实体的配置，可以设置全局主键配置</p><pre><code class="hljs yaml"><span class="hljs-comment">#全局设置主键生成策略</span><span class="hljs-string">mybatis-plus.global-config.db-config.id-type=auto</span></code></pre><blockquote><p>@TableField  </p></blockquote><ul><li>描述：字段注解(非主键)</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">数据库字段名</td></tr><tr><td align="center">el</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">映射为原生 <code>#{ ... }</code> 逻辑,相当于写在 xml 里的 <code>#{ ... }</code> 部分</td></tr><tr><td align="center">exist</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否为数据库表字段</td></tr><tr><td align="center">condition</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>% s=#{ %s }</code>,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java" target="_blank" rel="noopener">参考</a></td></tr><tr><td align="center">update</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td></tr><tr><td align="center">insertStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_NULL: <code>insert into table_a(&lt;if test=&quot;columnProperty != null&quot;&gt;column&lt;/if&gt;) values (&lt;if test=&quot;columnProperty != null&quot;&gt;#{columnProperty}&lt;/if&gt;)</code></td></tr><tr><td align="center">updateStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：IGNORED: <code>update table_a set column=#{columnProperty}</code></td></tr><tr><td align="center">whereStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_EMPTY: <code>where &lt;if test=&quot;columnProperty != null and columnProperty!=&#39;&#39;&quot;&gt;column=#{columnProperty}&lt;/if&gt;</code></td></tr><tr><td align="center">fill</td><td align="center">Enum</td><td align="center">否</td><td align="center">FieldFill.DEFAULT</td><td align="center">字段自动填充策略</td></tr><tr><td align="center">select</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否进行 select 查询</td></tr><tr><td align="center">keepGlobalFormat</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td align="center">是否保持使用全局的 format 进行处理</td></tr><tr><td align="center">jdbcType</td><td align="center">JdbcType</td><td align="center">否</td><td align="center">JdbcType.UNDEFINED</td><td align="center">JDBC类型 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">typeHandler</td><td align="center">Class&lt;? extends TypeHandler&gt;</td><td align="center">否</td><td align="center">UnknownTypeHandler.class</td><td align="center">类型处理器 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">numericScale</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">指定小数点后保留的位数</td></tr></tbody></table><blockquote><p>另外这个注解的包可能不会自动引入，有个小BUG，所以需要手动引入一下,其他的就看官方文档吧</p></blockquote><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><blockquote><p>这个主要是为create_time、update_time进行自动填充</p></blockquote><h4 id="实体类修改"><a href="#实体类修改" class="headerlink" title="实体类修改"></a>实体类修改</h4><p>在实体类（如果前面提取了公共实体类，那么这里操作公共实体类）添加注解@TableField(fill = FieldFill.INSERT)</p><p>FieldFill是一个enum 枚举类型 </p><p>所以create_time设置INSERT  ，update_time设置 INSERT_UPDATE</p><h4 id="实现元对象处理器接口"><a href="#实现元对象处理器接口" class="headerlink" title="实现元对象处理器接口"></a>实现元对象处理器接口</h4><p><strong><code>注意：不要忘记添加 @Component 注解</code></strong></p><pre><code class="hljs java"><span class="hljs-meta">@Slf</span>4j<span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;        log.info(<span class="hljs-string">"start insert fill ...."</span>);        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">"createTime"</span>, <span class="hljs-keyword">new</span> Date(), metaObject);        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">"updateTime"</span>, <span class="hljs-keyword">new</span> Date(), metaObject);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;        log.info(<span class="hljs-string">"start update fill ...."</span>);        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">"updateTime"</span>, <span class="hljs-keyword">new</span> Date(), metaObject);    &#125;&#125;</code></pre><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><h4 id="修改实体类"><a href="#修改实体类" class="headerlink" title="修改实体类"></a>修改实体类</h4><pre><code class="hljs java"><span class="hljs-meta">@Version</span><span class="hljs-keyword">private</span> Integer version;</code></pre><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><pre><code class="hljs java"><span class="hljs-meta">@EnableTransactionManagement</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@MapperScan</span>(<span class="hljs-string">"cn.jimu98.xxx.mapper"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;    &#125;</code></pre><h4 id="注册乐观锁插件"><a href="#注册乐观锁插件" class="headerlink" title="注册乐观锁插件"></a>注册乐观锁插件</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 乐观锁插件</span><span class="hljs-comment">     */</span><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();&#125;</code></pre><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 分页插件</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PaginationInterceptor();&#125;</code></pre><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><h4 id="数据库修改"><a href="#数据库修改" class="headerlink" title="数据库修改"></a>数据库修改</h4><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> <span class="hljs-string">`deleted`</span> <span class="hljs-built_in">boolean</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">false</span></code></pre><h4 id="实体类修改-1"><a href="#实体类修改-1" class="headerlink" title="实体类修改"></a>实体类修改</h4><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span><span class="hljs-keyword">private</span> Integer deleted;</code></pre><h4 id="配置（可选）"><a href="#配置（可选）" class="headerlink" title="配置（可选）"></a>配置（可选）</h4><pre><code class="hljs yaml"><span class="hljs-string">mybatis-plus.global-config.db-config.logic-delete-value=1</span><span class="hljs-string">mybatis-plus.global-config.db-config.logic-not-delete-value=0</span></code></pre><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><table><thead><tr><th><strong>查询方式</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>setSqlSelect</strong></td><td>设置 SELECT 查询字段</td></tr><tr><td><strong>where</strong></td><td>WHERE 语句，拼接 + WHERE 条件</td></tr><tr><td><strong>and</strong></td><td>AND 语句，拼接 + AND 字段=值</td></tr><tr><td><strong>andNew</strong></td><td>AND 语句，拼接 + AND (字段=值)</td></tr><tr><td><strong>or</strong></td><td>OR 语句，拼接 + OR 字段=值</td></tr><tr><td><strong>orNew</strong></td><td>OR 语句，拼接 + OR (字段=值)</td></tr><tr><td><strong>eq</strong></td><td>等于=</td></tr><tr><td><strong>allEq</strong></td><td>基于 map 内容等于=</td></tr><tr><td><strong>ne</strong></td><td>不等于&lt;&gt;</td></tr><tr><td><strong>gt</strong></td><td>大于&gt;</td></tr><tr><td><strong>ge</strong></td><td>大于等于&gt;=</td></tr><tr><td><strong>lt</strong></td><td>小于&lt;</td></tr><tr><td><strong>le</strong></td><td>小于等于&lt;=</td></tr><tr><td><strong>like</strong></td><td>模糊查询 LIKE</td></tr><tr><td><strong>notLike</strong></td><td>模糊查询 NOT LIKE</td></tr><tr><td><strong>in</strong></td><td>IN 查询</td></tr><tr><td><strong>notIn</strong></td><td>NOT IN 查询</td></tr><tr><td><strong>isNull</strong></td><td>NULL 值查询</td></tr><tr><td><strong>isNotNull</strong></td><td>IS NOT NULL</td></tr><tr><td><strong>groupBy</strong></td><td>分组 GROUP BY</td></tr><tr><td><strong>having</strong></td><td>HAVING 关键词</td></tr><tr><td><strong>orderBy</strong></td><td>排序 ORDER BY</td></tr><tr><td><strong>orderAsc</strong></td><td>ASC 排序 ORDER BY</td></tr><tr><td><strong>orderDesc</strong></td><td>DESC 排序 ORDER BY</td></tr><tr><td><strong>exists</strong></td><td>EXISTS 条件语句</td></tr><tr><td><strong>notExists</strong></td><td>NOT EXISTS 条件语句</td></tr><tr><td><strong>between</strong></td><td>BETWEEN 条件语句</td></tr><tr><td><strong>notBetween</strong></td><td>NOT BETWEEN 条件语句</td></tr><tr><td><strong>addFilter</strong></td><td>自由拼接 SQL</td></tr><tr><td><strong>last</strong></td><td>拼接在最后，例如：last(“LIMIT 1”)</td></tr></tbody></table><p>其他的就看官网吧<a href="https://mp.baomidou.com/guide/wrapper.html#abstractwrapper" target="_blank" rel="noopener">https://mp.baomidou.com/guide/wrapper.html#abstractwrapper</a></p>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>MyBatis-Plus</tag>
      
      <tag>代码生成器</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】项目框架构建</title>
    <link href="/2020/07/08/goujian/2.%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E6%9E%84%E5%BB%BA/"/>
    <url>/2020/07/08/goujian/2.%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】项目框架构建"><a href="#【项目创建流程】项目框架构建" class="headerlink" title="【项目创建流程】项目框架构建"></a>【项目创建流程】项目框架构建</h1><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><blockquote><p>在项目创建初期，应该首先规划一下工程结构</p><p>将各个模块区分开来（根据阿里规范命名）</p><p>重复的功能进行抽离</p><p>pom文件根据范围选择合适的引用地址</p></blockquote><h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><h3 id="创建SpringBoot项目"><a href="#创建SpringBoot项目" class="headerlink" title="创建SpringBoot项目"></a>创建SpringBoot项目</h3><h4 id="删除一些无用的文件"><a href="#删除一些无用的文件" class="headerlink" title="删除一些无用的文件"></a>删除一些无用的文件</h4><h4 id="配置SpringBoot版本"><a href="#配置SpringBoot版本" class="headerlink" title="配置SpringBoot版本"></a>配置SpringBoot版本</h4><h4 id="配置Pom文件依赖版本号"><a href="#配置Pom文件依赖版本号" class="headerlink" title="配置Pom文件依赖版本号"></a>配置Pom文件依赖版本号</h4><p>比如：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis-plus.version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-plus.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">velocity.version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">velocity.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">swagger.version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">swagger.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aliyun.oss.version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun.oss.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">jodatime.version</span>&gt;</span>2.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">jodatime.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">commons-fileupload.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">commons-io.version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">commons-io.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">commons-lang.version</span>&gt;</span>3.9<span class="hljs-tag">&lt;/<span class="hljs-name">commons-lang.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">httpclient.version</span>&gt;</span>4.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">httpclient.version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><h4 id="配置pom依赖"><a href="#配置pom依赖" class="headerlink" title="配置pom依赖"></a>配置pom依赖</h4><blockquote><p>这里不需要真正引入，在子项目中引入</p></blockquote><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--Spring Cloud--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--mybatis-plus 持久层--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span></code></pre><h2 id="创建父模块"><a href="#创建父模块" class="headerlink" title="创建父模块"></a>创建父模块</h2><h3 id="创建普通Maven项目即可"><a href="#创建普通Maven项目即可" class="headerlink" title="创建普通Maven项目即可"></a>创建普通Maven项目即可</h3><h4 id="删除src文件夹"><a href="#删除src文件夹" class="headerlink" title="删除src文件夹"></a>删除src文件夹</h4><h4 id="配置POM"><a href="#配置POM" class="headerlink" title="配置POM"></a>配置POM</h4><blockquote><p>这里一般配置一下lombok mp，swagger之类的 以及子项目复用的依赖</p></blockquote><h2 id="创建子模块"><a href="#创建子模块" class="headerlink" title="创建子模块"></a>创建子模块</h2><h3 id="创建普通Maven项目即可-1"><a href="#创建普通Maven项目即可-1" class="headerlink" title="创建普通Maven项目即可"></a>创建普通Maven项目即可</h3><h3 id="配置Pom"><a href="#配置Pom" class="headerlink" title="配置Pom"></a>配置Pom</h3><h3 id="改YAM"><a href="#改YAM" class="headerlink" title="改YAM"></a>改YAM</h3><h3 id="主启动"><a href="#主启动" class="headerlink" title="主启动"></a>主启动</h3><h3 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h3><blockquote><p>看一下这个业务模块需不需要用代码生成器生成</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【项目创建流程】数据库规范</title>
    <link href="/2020/07/08/goujian/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83/"/>
    <url>/2020/07/08/goujian/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="【项目创建流程】数据库规范"><a href="#【项目创建流程】数据库规范" class="headerlink" title="【项目创建流程】数据库规范"></a>【项目创建流程】数据库规范</h1><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h2><blockquote><p>注意，这里要遵循阿里数据库设计规约（参考《阿里巴巴Java开发手册》）</p></blockquote><p>1、库名与应用名称尽量一致</p><p>2、表名、字段名必须使用小写字母或数字，禁止出现数字开头，</p><p>3、表名不使用复数名词</p><p>4、表的命名最好是加上“业务名称_表的作用”。如，edu_teacher</p><p>5、表必备三字段：id, gmt_create, gmt_modified</p><p>6、单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。 </p><p>7、表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint （1 表示是，0 表示否）。 </p><p>说明：任何字段如果为非负数，必须是 unsigned。</p><p>注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的 命名方式是为了明确其取值含义与取值范围。 </p><p>正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。 </p><p>8、小数类型为 decimal，禁止使用 float 和 double。 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p><p>9、如果存储的字符串长度几乎相等，使用 char 定长字符串类型。 </p><p>10、varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p><p>11、唯一索引名为 uk_字段名(unique key)；普通索引名则为 idx_字段名(index)。</p><p>说明：uk_ 即 unique key；idx_ 即 index 的简称</p><p>12、不得使用外键与级联，一切外键概念必须在应用层解决。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。 </p>]]></content>
    
    
    <categories>
      
      <category>项目构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
